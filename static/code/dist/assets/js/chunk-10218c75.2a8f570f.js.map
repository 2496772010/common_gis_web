{"version":3,"sources":["webpack:///./src/views/travel/analysis/JdHeatmap.vue","webpack:///./src/views/travel/analysis/JdHeatmap.vue?e740","webpack:///./node_modules/ol/webgl.js","webpack:///./node_modules/ol/webgl/Buffer.js","webpack:///./node_modules/ol/webgl/ContextEventType.js","webpack:///./node_modules/ol/webgl/PostProcessingPass.js","webpack:///./node_modules/ol/vec/mat4.js","webpack:///./node_modules/ol/webgl/Helper.js","webpack:///./node_modules/ol/renderer/webgl/Layer.js","webpack:///./node_modules/ol/webgl/RenderTarget.js","webpack:///./node_modules/ol/worker/webgl.js","webpack:///./node_modules/ol/renderer/webgl/PointsLayer.js","webpack:///./node_modules/ol/layer/Heatmap.js","webpack:///./src/GaoDeCodeconfig.js"],"names":["_createBlock","_createVNode","_component_base_map","onMapCreated","$options","name","components","BaseMap","data","heatLayer","HeatMapLayer","blur","radius","map","methods","this","init","addLayer","source","createHeatMapSource","TRAVEL_CODES","setSource","console","log","__exports__","render","ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER","STREAM_DRAW","STATIC_DRAW","DYNAMIC_DRAW","UNSIGNED_BYTE","UNSIGNED_SHORT","UNSIGNED_INT","FLOAT","CONTEXT_IDS","getContext","canvas","opt_attributes","ii","length","i","context","e","BufferUsage","WebGLArrayBuffer","type","opt_usage","array","usage","undefined","prototype","ofSize","size","getArrayClassForType","fromArray","arrayClass","from","fromArrayBuffer","buffer","getType","getArray","getUsage","getSize","Float32Array","Uint32Array","LOST","RESTORED","DEFAULT_VERTEX_SHADER","DEFAULT_FRAGMENT_SHADER","WebGLPostProcessingPass","options","gl_","webGlContext","gl","scaleRatio_","scaleRatio","renderTargetTexture_","createTexture","renderTargetTextureSize_","frameBuffer_","createFramebuffer","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","fragmentShader","FRAGMENT_SHADER","renderTargetProgram_","createProgram","attachShader","linkProgram","renderTargetVerticesBuffer_","createBuffer","verticesArray","bindBuffer","bufferData","renderTargetAttribLocation_","getAttribLocation","renderTargetUniformLocation_","getUniformLocation","renderTargetTextureLocation_","uniforms_","uniforms","Object","keys","forEach","push","value","location","bind","getGL","frameState","textureSize","drawingBufferWidth","drawingBufferHeight","bindFramebuffer","FRAMEBUFFER","getFrameBuffer","viewport","level","internalFormat","RGBA","border","format","bindTexture","TEXTURE_2D","texImage2D","texParameteri","TEXTURE_MIN_FILTER","LINEAR","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","framebufferTexture2D","COLOR_ATTACHMENT0","apply","nextPass","activeTexture","TEXTURE0","clearColor","clear","COLOR_BUFFER_BIT","enable","BLEND","blendFunc","ONE","ONE_MINUS_SRC_ALPHA","useProgram","enableVertexAttribArray","vertexAttribPointer","uniform2f","uniform1i","applyUniforms","drawArrays","TRIANGLES","textureSlot","uniform","HTMLCanvasElement","ImageData","texture","width","height","Uint8Array","Array","isArray","uniform3f","uniform4f","uniform1f","create","fromTransform","mat4","transform","__extends","extendStatics","d","b","setPrototypeOf","__proto__","p","hasOwnProperty","call","TypeError","String","__","constructor","DefaultUniform","PROJECTION_MATRIX","OFFSET_SCALE_MATRIX","OFFSET_ROTATION_MATRIX","TIME","ZOOM","RESOLUTION","AttributeType","_super","WebGLHelper","opt_options","_this","boundHandleWebGLContextLost_","handleWebGLContextLost","boundHandleWebGLContextRestored_","handleWebGLContextRestored","canvas_","document","createElement","style","position","left","bufferCache_","extensionCache_","currentProgram_","addEventListener","ContextEventType","offsetRotateMatrix_","offsetScaleMatrix_","tmpMat4_","uniformLocations_","attribLocations_","name_1","postProcessPasses_","postProcesses","shaderCompileErrors_","startTime_","Date","now","getExtension","extension","bufferKey","bufferCache","webGlBuffer","flushBufferData","deleteBuffer","buf","bufferCacheEntry","isContextLost","disposeInternal","removeEventListener","loseContext","prepareDraw","opt_disableAlphaBlend","getCanvas","pixelRatio","ZERO","applyFrameState","prepareDrawToRenderTarget","renderTarget","getFramebuffer","getTexture","drawElements","start","end","elementType","elementSize","numItems","offsetInBytes","finalizeDraw","rotation","viewState","offsetScaleMatrix","offsetRotateMatrix","setUniformMatrixValue","setUniformFloatValue","zoom","resolution","HTMLImageElement","prevValue","imageReady","complete","program","shader","getProgram","fragmentShaderSource","vertexShaderSource","getShaderParameter","COMPILE_STATUS","message","getShaderInfoLog","Error","deleteShader","getProgramParameter","LINK_STATUS","getAttributeLocation","makeProjectionTransform","center","uniformMatrix4fv","enableAttributeArray_","attribName","stride","offset","enableAttributes","attributes","computeAttributesStride","attr","getByteSizeFromType","opt_data","opt_texture","Disposable","BYTES_PER_ELEMENT","Uint16Array","WebGLWorkerMessageType","GENERATE_BUFFERS","WebGLLayerRenderer","layer","helper","className","dispose","dispatchRenderEvent_","getLayer","hasListener","event_1","dispatchEvent","preRender","PRERENDER","postRender","POSTRENDER","Layer","colorEncodeId","id","opt_array","radix","divide","Math","floor","colorDecodeId","color","mult","round","tmpArray4","WebGLRenderTarget","opt_size","helper_","texture_","framebuffer_","size_","data_","dataCacheDirty_","updateSize_","setSize","clearCachedData","readAll","readPixels","readPixel","x","y","index","blob","Blob","url","URL","createObjectURL","Worker","WebGLPointsLayerRenderer","projectionMatrixTransform","sourceRevision_","verticesBuffer_","hitVerticesBuffer_","indicesBuffer_","program_","hitDetectionEnabled_","hitFragmentShader","hitVertexShader","hitProgram_","customAttributes","attribute","concat","hitDetectionAttributes","previousExtent_","currentTransform_","renderTransform_","invertRenderTransform_","renderInstructions_","hitRenderInstructions_","hitRenderTarget_","worker_","event","received","projectionTransform","hitDetection","vertexBuffer","indexBuffer","renderInstructions","changed","featureCache_","featureCount_","getSource","sourceListenKeys_","VectorEventType","ADDFEATURE","handleSourceFeatureAdded_","CHANGEFEATURE","handleSourceFeatureChanged_","REMOVEFEATURE","handleSourceFeatureDelete_","CLEAR","handleSourceFeatureClear_","forEachFeature","feature","properties","getProperties","geometry","getGeometry","renderFrame","renderCount","layerState","layerStatesArray","layerIndex","opacity","parseFloat","renderHitDetection","prepareFrame","vectorSource","viewNotMoving","viewHints","ViewHint","ANIMATING","INTERACTING","extentChanged","extent","sourceChanged","getRevision","projection","renderBuffer","BaseVector","getRenderBuffer","loadFeatures","rebuildBuffers_","slice","featureCache","totalInstructionsCount","totalHitInstructionsCount","hitColor","tmpCoords","tmpColor","renderIndex","hitIndex","featureUid","GeometryType","POINT","getFlatCoordinates","Number","j","callback","customAttributesCount","postMessage","hitMessage","forEachFeatureAtCoordinate","coordinate","hitTolerance","matches","pixel","coordinateToPixelTransform","uid","toString","getFeatureByUid","terminate","layer_","key","Property","BLUR","GRADIENT","RADIUS","DEFAULT_GRADIENT","Heatmap","baseOptions","gradient","weight","gradient_","addChangeListener","handleGradientChanged_","setGradient","setBlur","setRadius","weightFunction_","get","setRenderOrder","getBlur","getGradient","getRadius","createGradient","set","colors","createRenderer","getClassName","u_size","u_blurSlope","max","u_gradientTexture","renderDeclutter","Vector","createLinearGradient","step","addColorStop","fillStyle","fillRect","restaurant_code","vecation_code"],"mappings":"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","file":"assets/js/chunk-10218c75.2a8f570f.js","sourcesContent":["<template>\r\n    <div>\r\n        <base-map @mapCreated=\"onMapCreated\"></base-map>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import BaseMap from \"../../../components/BaseMap\";\r\n    import {Heatmap as HeatMapLayer} from 'ol/layer'\r\n    import {createHeatMapSource} from \"../../../utils\";\r\n    import {TRAVEL_CODES} from \"../../../GaoDeCodeconfig\";\r\n\r\n    export default {\r\n        name: \"JdHeatmap\",\r\n        components: {BaseMap},\r\n        data() {\r\n            return {\r\n                heatLayer: new HeatMapLayer({\r\n                    blur: 20,\r\n                    radius: 10\r\n                }),\r\n                map: null\r\n            }\r\n        },\r\n        methods: {\r\n            onMapCreated(map) {\r\n                this.map = map\r\n                this.init()\r\n            },\r\n            async init() {\r\n                this.map.addLayer(this.heatLayer)\r\n                let source =await createHeatMapSource('邯郸市', TRAVEL_CODES)\r\n                this.heatLayer.setSource(source)\r\n                console.log(this.heatLayer)\r\n                console.log(source)\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>","import { render } from \"./JdHeatmap.vue?vue&type=template&id=53de137c&scoped=true\"\nimport script from \"./JdHeatmap.vue?vue&type=script&lang=js\"\nexport * from \"./JdHeatmap.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"D:\\\\DEV\\\\JS\\\\supermap_proj1\\\\node_modules\\\\vue-loader-v16\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-53de137c\"]])\n\nexport default __exports__","/**\n * @module ol/webgl\n */\n/**\n * Constants taken from goog.webgl\n */\n/**\n * Used by {@link module:ol/webgl/Helper~WebGLHelper} for buffers containing vertices data, such as\n * position, color, texture coordinate, etc. These vertices are then referenced by an index buffer\n * to be drawn on screen (see {@link module:ol/webgl.ELEMENT_ARRAY_BUFFER}).\n * @const\n * @type {number}\n * @api\n */\nexport var ARRAY_BUFFER = 0x8892;\n/**\n * Used by {@link module:ol/webgl/Helper~WebGLHelper} for buffers containing indices data.\n * Index buffers are essentially lists of references to vertices defined in a vertex buffer\n * (see {@link module:ol/webgl.ARRAY_BUFFER}), and define the primitives (triangles) to be drawn.\n * @const\n * @type {number}\n * @api\n */\nexport var ELEMENT_ARRAY_BUFFER = 0x8893;\n/**\n * Used by {link module:ol/webgl/Buffer~WebGLArrayBuffer}.\n * @const\n * @type {number}\n * @api\n */\nexport var STREAM_DRAW = 0x88e0;\n/**\n * Used by {link module:ol/webgl/Buffer~WebGLArrayBuffer}.\n * @const\n * @type {number}\n * @api\n */\nexport var STATIC_DRAW = 0x88e4;\n/**\n * Used by {link module:ol/webgl/Buffer~WebGLArrayBuffer}.\n * @const\n * @type {number}\n * @api\n */\nexport var DYNAMIC_DRAW = 0x88e8;\n/**\n * @const\n * @type {number}\n */\nexport var UNSIGNED_BYTE = 0x1401;\n/**\n * @const\n * @type {number}\n */\nexport var UNSIGNED_SHORT = 0x1403;\n/**\n * @const\n * @type {number}\n */\nexport var UNSIGNED_INT = 0x1405;\n/**\n * @const\n * @type {number}\n */\nexport var FLOAT = 0x1406;\n/** end of goog.webgl constants\n */\n/**\n * @const\n * @type {Array<string>}\n */\nvar CONTEXT_IDS = ['experimental-webgl', 'webgl', 'webkit-3d', 'moz-webgl'];\n/**\n * @param {HTMLCanvasElement} canvas Canvas.\n * @param {Object} [opt_attributes] Attributes.\n * @return {WebGLRenderingContext} WebGL rendering context.\n */\nexport function getContext(canvas, opt_attributes) {\n    var ii = CONTEXT_IDS.length;\n    for (var i = 0; i < ii; ++i) {\n        try {\n            var context = canvas.getContext(CONTEXT_IDS[i], opt_attributes);\n            if (context) {\n                return /** @type {!WebGLRenderingContext} */ (context);\n            }\n        }\n        catch (e) {\n            // pass\n        }\n    }\n    return null;\n}\n/**\n * @type {Array<string>}\n */\nvar supportedExtensions;\n/**\n * @return {Array<string>} List of supported WebGL extensions.\n */\nexport function getSupportedExtensions() {\n    if (!supportedExtensions) {\n        var canvas = document.createElement('canvas');\n        var gl = getContext(canvas);\n        if (gl) {\n            supportedExtensions = gl.getSupportedExtensions();\n        }\n    }\n    return supportedExtensions;\n}\n//# sourceMappingURL=webgl.js.map","/**\n * @module ol/webgl/Buffer\n */\nimport { ARRAY_BUFFER, ELEMENT_ARRAY_BUFFER } from '../webgl.js';\nimport { DYNAMIC_DRAW, STATIC_DRAW, STREAM_DRAW } from '../webgl.js';\nimport { assert } from '../asserts.js';\n/**\n * Used to describe the intended usage for the data: `STATIC_DRAW`, `STREAM_DRAW`\n * or `DYNAMIC_DRAW`.\n * @enum {number}\n */\nexport var BufferUsage = {\n    STATIC_DRAW: STATIC_DRAW,\n    STREAM_DRAW: STREAM_DRAW,\n    DYNAMIC_DRAW: DYNAMIC_DRAW,\n};\n/**\n * @classdesc\n * Object used to store an array of data as well as usage information for that data.\n * Stores typed arrays internally, either Float32Array or Uint16/32Array depending on\n * the buffer type (ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER) and available extensions.\n *\n * To populate the array, you can either use:\n * * A size using `#ofSize(buffer)`\n * * An `ArrayBuffer` object using `#fromArrayBuffer(buffer)`\n * * A plain array using `#fromArray(array)`\n *\n * Note:\n * See the documentation of [WebGLRenderingContext.bufferData](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData)\n * for more info on buffer usage.\n * @api\n */\nvar WebGLArrayBuffer = /** @class */ (function () {\n    /**\n     * @param {number} type Buffer type, either ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER.\n     * @param {number} [opt_usage] Intended usage, either `STATIC_DRAW`, `STREAM_DRAW` or `DYNAMIC_DRAW`.\n     * Default is `DYNAMIC_DRAW`.\n     */\n    function WebGLArrayBuffer(type, opt_usage) {\n        /**\n         * @private\n         * @type {Float32Array|Uint32Array}\n         */\n        this.array = null;\n        /**\n         * @private\n         * @type {number}\n         */\n        this.type = type;\n        assert(type === ARRAY_BUFFER || type === ELEMENT_ARRAY_BUFFER, 62);\n        /**\n         * @private\n         * @type {number}\n         */\n        this.usage = opt_usage !== undefined ? opt_usage : BufferUsage.STATIC_DRAW;\n    }\n    /**\n     * Populates the buffer with an array of the given size (all values will be zeroes).\n     * @param {number} size Array size\n     */\n    WebGLArrayBuffer.prototype.ofSize = function (size) {\n        this.array = new (getArrayClassForType(this.type))(size);\n    };\n    /**\n     * Populates the buffer with an array of the given size (all values will be zeroes).\n     * @param {Array<number>} array Numerical array\n     */\n    WebGLArrayBuffer.prototype.fromArray = function (array) {\n        var arrayClass = getArrayClassForType(this.type);\n        this.array = arrayClass.from\n            ? arrayClass.from(array)\n            : new arrayClass(array);\n    };\n    /**\n     * Populates the buffer with a raw binary array buffer.\n     * @param {ArrayBuffer} buffer Raw binary buffer to populate the array with. Note that this buffer must have been\n     * initialized for the same typed array class.\n     */\n    WebGLArrayBuffer.prototype.fromArrayBuffer = function (buffer) {\n        this.array = new (getArrayClassForType(this.type))(buffer);\n    };\n    /**\n     * @return {number} Buffer type.\n     */\n    WebGLArrayBuffer.prototype.getType = function () {\n        return this.type;\n    };\n    /**\n     * Will return null if the buffer was not initialized\n     * @return {Float32Array|Uint32Array} Array.\n     */\n    WebGLArrayBuffer.prototype.getArray = function () {\n        return this.array;\n    };\n    /**\n     * @return {number} Usage.\n     */\n    WebGLArrayBuffer.prototype.getUsage = function () {\n        return this.usage;\n    };\n    /**\n     * Will return 0 if the buffer is not initialized\n     * @return {number} Array size\n     */\n    WebGLArrayBuffer.prototype.getSize = function () {\n        return this.array ? this.array.length : 0;\n    };\n    return WebGLArrayBuffer;\n}());\n/**\n * Returns a typed array constructor based on the given buffer type\n * @param {number} type Buffer type, either ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER.\n * @return {Float32ArrayConstructor|Uint32ArrayConstructor} The typed array class to use for this buffer.\n */\nexport function getArrayClassForType(type) {\n    switch (type) {\n        case ARRAY_BUFFER:\n            return Float32Array;\n        case ELEMENT_ARRAY_BUFFER:\n            return Uint32Array;\n        default:\n            return Float32Array;\n    }\n}\nexport default WebGLArrayBuffer;\n//# sourceMappingURL=Buffer.js.map","/**\n * @module ol/webgl/ContextEventType\n */\n/**\n * @enum {string}\n */\nexport default {\n    LOST: 'webglcontextlost',\n    RESTORED: 'webglcontextrestored',\n};\n//# sourceMappingURL=ContextEventType.js.map","/**\n * @module ol/webgl/PostProcessingPass\n */\nvar DEFAULT_VERTEX_SHADER = \"\\n  precision mediump float;\\n  \\n  attribute vec2 a_position;\\n  varying vec2 v_texCoord;\\n  varying vec2 v_screenCoord;\\n  \\n  uniform vec2 u_screenSize;\\n   \\n  void main() {\\n    v_texCoord = a_position * 0.5 + 0.5;\\n    v_screenCoord = v_texCoord * u_screenSize;\\n    gl_Position = vec4(a_position, 0.0, 1.0);\\n  }\\n\";\nvar DEFAULT_FRAGMENT_SHADER = \"\\n  precision mediump float;\\n   \\n  uniform sampler2D u_image;\\n   \\n  varying vec2 v_texCoord;\\n   \\n  void main() {\\n    gl_FragColor = texture2D(u_image, v_texCoord);\\n  }\\n\";\n/**\n * @typedef {Object} Options\n * @property {WebGLRenderingContext} webGlContext WebGL context; mandatory.\n * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than\n * the main canvas that will then be sampled up (useful for saving resource on blur steps).\n * @property {string} [vertexShader] Vertex shader source\n * @property {string} [fragmentShader] Fragment shader source\n * @property {Object<string,import(\"./Helper\").UniformValue>} [uniforms] Uniform definitions for the post process step\n */\n/**\n * @typedef {Object} UniformInternalDescription\n * @property {import(\"./Helper\").UniformValue} value Value\n * @property {number} location Location\n * @property {WebGLTexture} [texture] Texture\n * @private\n */\n/**\n * @classdesc\n * This class is used to define Post Processing passes with custom shaders and uniforms.\n * This is used internally by {@link module:ol/webgl/Helper~WebGLHelper}.\n *\n * Please note that the final output on the DOM canvas is expected to have premultiplied alpha, which means that\n * a pixel which is 100% red with an opacity of 50% must have a color of (r=0.5, g=0, b=0, a=0.5).\n * Failing to provide pixel colors with premultiplied alpha will result in render anomalies.\n *\n * The default post-processing pass does *not* multiply color values with alpha value, it expects color values to be\n * premultiplied.\n *\n * Default shaders are shown hereafter:\n *\n * * Vertex shader:\n *\n *   ```\n *   precision mediump float;\n *\n *   attribute vec2 a_position;\n *   varying vec2 v_texCoord;\n *   varying vec2 v_screenCoord;\n *\n *   uniform vec2 u_screenSize;\n *\n *   void main() {\n *     v_texCoord = a_position * 0.5 + 0.5;\n *     v_screenCoord = v_texCoord * u_screenSize;\n *     gl_Position = vec4(a_position, 0.0, 1.0);\n *   }\n *   ```\n *\n * * Fragment shader:\n *\n *   ```\n *   precision mediump float;\n *\n *   uniform sampler2D u_image;\n *\n *   varying vec2 v_texCoord;\n *\n *   void main() {\n *     gl_FragColor = texture2D(u_image, v_texCoord);\n *   }\n *   ```\n *\n * @api\n */\nvar WebGLPostProcessingPass = /** @class */ (function () {\n    /**\n     * @param {Options} options Options.\n     */\n    function WebGLPostProcessingPass(options) {\n        this.gl_ = options.webGlContext;\n        var gl = this.gl_;\n        this.scaleRatio_ = options.scaleRatio || 1;\n        this.renderTargetTexture_ = gl.createTexture();\n        this.renderTargetTextureSize_ = null;\n        this.frameBuffer_ = gl.createFramebuffer();\n        // compile the program for the frame buffer\n        // TODO: make compilation errors show up\n        var vertexShader = gl.createShader(gl.VERTEX_SHADER);\n        gl.shaderSource(vertexShader, options.vertexShader || DEFAULT_VERTEX_SHADER);\n        gl.compileShader(vertexShader);\n        var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n        gl.shaderSource(fragmentShader, options.fragmentShader || DEFAULT_FRAGMENT_SHADER);\n        gl.compileShader(fragmentShader);\n        this.renderTargetProgram_ = gl.createProgram();\n        gl.attachShader(this.renderTargetProgram_, vertexShader);\n        gl.attachShader(this.renderTargetProgram_, fragmentShader);\n        gl.linkProgram(this.renderTargetProgram_);\n        // bind the vertices buffer for the frame buffer\n        this.renderTargetVerticesBuffer_ = gl.createBuffer();\n        var verticesArray = [-1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1];\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.renderTargetVerticesBuffer_);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(verticesArray), gl.STATIC_DRAW);\n        this.renderTargetAttribLocation_ = gl.getAttribLocation(this.renderTargetProgram_, 'a_position');\n        this.renderTargetUniformLocation_ = gl.getUniformLocation(this.renderTargetProgram_, 'u_screenSize');\n        this.renderTargetTextureLocation_ = gl.getUniformLocation(this.renderTargetProgram_, 'u_image');\n        /**\n         * Holds info about custom uniforms used in the post processing pass\n         * @type {Array<UniformInternalDescription>}\n         * @private\n         */\n        this.uniforms_ = [];\n        options.uniforms &&\n            Object.keys(options.uniforms).forEach(function (name) {\n                this.uniforms_.push({\n                    value: options.uniforms[name],\n                    location: gl.getUniformLocation(this.renderTargetProgram_, name),\n                });\n            }.bind(this));\n    }\n    /**\n     * Get the WebGL rendering context\n     * @return {WebGLRenderingContext} The rendering context.\n     * @api\n     */\n    WebGLPostProcessingPass.prototype.getGL = function () {\n        return this.gl_;\n    };\n    /**\n     * Initialize the render target texture of the post process, make sure it is at the\n     * right size and bind it as a render target for the next draw calls.\n     * The last step to be initialized will be the one where the primitives are rendered.\n     * @param {import(\"../PluggableMap.js\").FrameState} frameState current frame state\n     * @api\n     */\n    WebGLPostProcessingPass.prototype.init = function (frameState) {\n        var gl = this.getGL();\n        var textureSize = [\n            gl.drawingBufferWidth * this.scaleRatio_,\n            gl.drawingBufferHeight * this.scaleRatio_,\n        ];\n        // rendering goes to my buffer\n        gl.bindFramebuffer(gl.FRAMEBUFFER, this.getFrameBuffer());\n        gl.viewport(0, 0, textureSize[0], textureSize[1]);\n        // if size has changed: adjust canvas & render target texture\n        if (!this.renderTargetTextureSize_ ||\n            this.renderTargetTextureSize_[0] !== textureSize[0] ||\n            this.renderTargetTextureSize_[1] !== textureSize[1]) {\n            this.renderTargetTextureSize_ = textureSize;\n            // create a new texture\n            var level = 0;\n            var internalFormat = gl.RGBA;\n            var border = 0;\n            var format = gl.RGBA;\n            var type = gl.UNSIGNED_BYTE;\n            var data = null;\n            gl.bindTexture(gl.TEXTURE_2D, this.renderTargetTexture_);\n            gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, textureSize[0], textureSize[1], border, format, type, data);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n            // bind the texture to the framebuffer\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.renderTargetTexture_, 0);\n        }\n    };\n    /**\n     * Render to the next postprocessing pass (or to the canvas if final pass).\n     * @param {import(\"../PluggableMap.js\").FrameState} frameState current frame state\n     * @param {WebGLPostProcessingPass} [nextPass] Next pass, optional\n     * @api\n     */\n    WebGLPostProcessingPass.prototype.apply = function (frameState, nextPass) {\n        var gl = this.getGL();\n        var size = frameState.size;\n        gl.bindFramebuffer(gl.FRAMEBUFFER, nextPass ? nextPass.getFrameBuffer() : null);\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, this.renderTargetTexture_);\n        // render the frame buffer to the canvas\n        gl.clearColor(0.0, 0.0, 0.0, 0.0);\n        gl.clear(gl.COLOR_BUFFER_BIT);\n        gl.enable(gl.BLEND);\n        gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.renderTargetVerticesBuffer_);\n        gl.useProgram(this.renderTargetProgram_);\n        gl.enableVertexAttribArray(this.renderTargetAttribLocation_);\n        gl.vertexAttribPointer(this.renderTargetAttribLocation_, 2, gl.FLOAT, false, 0, 0);\n        gl.uniform2f(this.renderTargetUniformLocation_, size[0], size[1]);\n        gl.uniform1i(this.renderTargetTextureLocation_, 0);\n        this.applyUniforms(frameState);\n        gl.drawArrays(gl.TRIANGLES, 0, 6);\n    };\n    /**\n     * @return {WebGLFramebuffer} Frame buffer\n     * @api\n     */\n    WebGLPostProcessingPass.prototype.getFrameBuffer = function () {\n        return this.frameBuffer_;\n    };\n    /**\n     * Sets the custom uniforms based on what was given in the constructor.\n     * @param {import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n     * @private\n     */\n    WebGLPostProcessingPass.prototype.applyUniforms = function (frameState) {\n        var gl = this.getGL();\n        var value;\n        var textureSlot = 1;\n        this.uniforms_.forEach(function (uniform) {\n            value =\n                typeof uniform.value === 'function'\n                    ? uniform.value(frameState)\n                    : uniform.value;\n            // apply value based on type\n            if (value instanceof HTMLCanvasElement || value instanceof ImageData) {\n                // create a texture & put data\n                if (!uniform.texture) {\n                    uniform.texture = gl.createTexture();\n                }\n                gl.activeTexture(gl[\"TEXTURE\" + textureSlot]);\n                gl.bindTexture(gl.TEXTURE_2D, uniform.texture);\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n                if (value instanceof ImageData) {\n                    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, value.width, value.height, 0, gl.UNSIGNED_BYTE, new Uint8Array(value.data));\n                }\n                else {\n                    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, value);\n                }\n                // fill texture slots\n                gl.uniform1i(uniform.location, textureSlot++);\n            }\n            else if (Array.isArray(value)) {\n                switch (value.length) {\n                    case 2:\n                        gl.uniform2f(uniform.location, value[0], value[1]);\n                        return;\n                    case 3:\n                        gl.uniform3f(uniform.location, value[0], value[1], value[2]);\n                        return;\n                    case 4:\n                        gl.uniform4f(uniform.location, value[0], value[1], value[2], value[3]);\n                        return;\n                    default:\n                        return;\n                }\n            }\n            else if (typeof value === 'number') {\n                gl.uniform1f(uniform.location, value);\n            }\n        });\n    };\n    return WebGLPostProcessingPass;\n}());\nexport default WebGLPostProcessingPass;\n//# sourceMappingURL=PostProcessingPass.js.map","/**\n * @module ol/vec/mat4\n */\n/**\n * @return {Array<number>} \"4x4 matrix representing a 3D identity transform.\"\n */\nexport function create() {\n    return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n}\n/**\n * @param {Array<number>} mat4 Flattened 4x4 matrix receiving the result.\n * @param {import(\"../transform.js\").Transform} transform Transformation matrix.\n * @return {Array<number>} \"2D transformation matrix as flattened 4x4 matrix.\"\n */\nexport function fromTransform(mat4, transform) {\n    mat4[0] = transform[0];\n    mat4[1] = transform[1];\n    mat4[4] = transform[2];\n    mat4[5] = transform[3];\n    mat4[12] = transform[4];\n    mat4[13] = transform[5];\n    return mat4;\n}\n//# sourceMappingURL=mat4.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/webgl/Helper\n */\nimport ContextEventType from '../webgl/ContextEventType.js';\nimport Disposable from '../Disposable.js';\nimport WebGLPostProcessingPass from './PostProcessingPass.js';\nimport { FLOAT, UNSIGNED_BYTE, UNSIGNED_INT, UNSIGNED_SHORT, getContext, } from '../webgl.js';\nimport { clear } from '../obj.js';\nimport { compose as composeTransform, create as createTransform, reset as resetTransform, rotate as rotateTransform, scale as scaleTransform, } from '../transform.js';\nimport { create, fromTransform } from '../vec/mat4.js';\nimport { getUid } from '../util.js';\n/**\n * @typedef {Object} BufferCacheEntry\n * @property {import(\"./Buffer.js\").default} buffer Buffer.\n * @property {WebGLBuffer} webGlBuffer WebGlBuffer.\n */\n/**\n * Shader types, either `FRAGMENT_SHADER` or `VERTEX_SHADER`.\n * @enum {number}\n */\nexport var ShaderType = {\n    FRAGMENT_SHADER: 0x8b30,\n    VERTEX_SHADER: 0x8b31,\n};\n/**\n * Uniform names used in the default shaders: `PROJECTION_MATRIX`, `OFFSET_SCALE_MATRIX`.\n * and `OFFSET_ROTATION_MATRIX`.\n * @enum {string}\n */\nexport var DefaultUniform = {\n    PROJECTION_MATRIX: 'u_projectionMatrix',\n    OFFSET_SCALE_MATRIX: 'u_offsetScaleMatrix',\n    OFFSET_ROTATION_MATRIX: 'u_offsetRotateMatrix',\n    TIME: 'u_time',\n    ZOOM: 'u_zoom',\n    RESOLUTION: 'u_resolution',\n};\n/**\n * Attribute types, either `UNSIGNED_BYTE`, `UNSIGNED_SHORT`, `UNSIGNED_INT` or `FLOAT`\n * Note: an attribute stored in a `Float32Array` should be of type `FLOAT`.\n * @enum {number}\n */\nexport var AttributeType = {\n    UNSIGNED_BYTE: UNSIGNED_BYTE,\n    UNSIGNED_SHORT: UNSIGNED_SHORT,\n    UNSIGNED_INT: UNSIGNED_INT,\n    FLOAT: FLOAT,\n};\n/**\n * Description of an attribute in a buffer\n * @typedef {Object} AttributeDescription\n * @property {string} name Attribute name to use in shaders\n * @property {number} size Number of components per attributes\n * @property {AttributeType} [type] Attribute type, i.e. number of bytes used to store the value. This is\n * determined by the class of typed array which the buffer uses (eg. `Float32Array` for a `FLOAT` attribute).\n * Default is `FLOAT`.\n */\n/**\n * @typedef {number|Array<number>|HTMLCanvasElement|HTMLImageElement|ImageData|import(\"../transform\").Transform} UniformLiteralValue\n */\n/**\n * Uniform value can be a number, array of numbers (2 to 4), canvas element or a callback returning\n * one of the previous types.\n * @typedef {UniformLiteralValue|function(import(\"../PluggableMap.js\").FrameState):UniformLiteralValue} UniformValue\n */\n/**\n * @typedef {Object} PostProcessesOptions\n * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than\n * the main canvas which will then be sampled up (useful for saving resource on blur steps).\n * @property {string} [vertexShader] Vertex shader source\n * @property {string} [fragmentShader] Fragment shader source\n * @property {Object<string,UniformValue>} [uniforms] Uniform definitions for the post process step\n */\n/**\n * @typedef {Object} Options\n * @property {Object<string,UniformValue>} [uniforms] Uniform definitions; property names must match the uniform\n * names in the provided or default shaders.\n * @property {Array<PostProcessesOptions>} [postProcesses] Post-processes definitions\n */\n/**\n * @typedef {Object} UniformInternalDescription\n * @property {string} name Name\n * @property {UniformValue} [value] Value\n * @property {WebGLTexture} [texture] Texture\n * @private\n */\n/**\n * @classdesc\n * This class is intended to provide low-level functions related to WebGL rendering, so that accessing\n * directly the WebGL API should not be required anymore.\n *\n * Several operations are handled by the `WebGLHelper` class:\n *\n * ### Define custom shaders and uniforms\n *\n *   *Shaders* are low-level programs executed on the GPU and written in GLSL. There are two types of shaders:\n *\n *   Vertex shaders are used to manipulate the position and attribute of *vertices* of rendered primitives (ie. corners of a square).\n *   Outputs are:\n *\n *   * `gl_Position`: position of the vertex in screen space\n *\n *   * Varyings usually prefixed with `v_` are passed on to the fragment shader\n *\n *   Fragment shaders are used to control the actual color of the pixels drawn on screen. Their only output is `gl_FragColor`.\n *\n *   Both shaders can take *uniforms* or *attributes* as input. Attributes are explained later. Uniforms are common, read-only values that\n *   can be changed at every frame and can be of type float, arrays of float or images.\n *\n *   Shaders must be compiled and assembled into a program like so:\n *   ```js\n *   // here we simply create two shaders and assemble them in a program which is then used\n *   // for subsequent rendering calls\n *   const vertexShader = new WebGLVertex(VERTEX_SHADER);\n *   const fragmentShader = new WebGLFragment(FRAGMENT_SHADER);\n *   const program = this.context.getProgram(fragmentShader, vertexShader);\n *   helper.useProgram(this.program);\n *   ```\n *\n *   Uniforms are defined using the `uniforms` option and can either be explicit values or callbacks taking the frame state as argument.\n *   You can also change their value along the way like so:\n *   ```js\n *   helper.setUniformFloatValue('u_value', valueAsNumber);\n *   ```\n *\n * ### Defining post processing passes\n *\n *   *Post processing* describes the act of rendering primitives to a texture, and then rendering this texture to the final canvas\n *   while applying special effects in screen space.\n *   Typical uses are: blurring, color manipulation, depth of field, filtering...\n *\n *   The `WebGLHelper` class offers the possibility to define post processes at creation time using the `postProcesses` option.\n *   A post process step accepts the following options:\n *\n *   * `fragmentShader` and `vertexShader`: text literals in GLSL language that will be compiled and used in the post processing step.\n *   * `uniforms`: uniforms can be defined for the post processing steps just like for the main render.\n *   * `scaleRatio`: allows using an intermediate texture smaller or higher than the final canvas in the post processing step.\n *     This is typically used in blur steps to reduce the performance overhead by using an already downsampled texture as input.\n *\n *   The {@link module:ol/webgl/PostProcessingPass~WebGLPostProcessingPass} class is used internally, refer to its documentation for more info.\n *\n * ### Binding WebGL buffers and flushing data into them\n *\n *   Data that must be passed to the GPU has to be transferred using {@link module:ol/webgl/Buffer~WebGLArrayBuffer} objects.\n *   A buffer has to be created only once, but must be bound every time the buffer content will be used for rendering.\n *   This is done using {@link bindBuffer}.\n *   When the buffer's array content has changed, the new data has to be flushed to the GPU memory; this is done using\n *   {@link flushBufferData}. Note: this operation is expensive and should be done as infrequently as possible.\n *\n *   When binding an array buffer, a `target` parameter must be given: it should be either {@link module:ol/webgl.ARRAY_BUFFER}\n *   (if the buffer contains vertices data) or {@link module:ol/webgl.ELEMENT_ARRAY_BUFFER} (if the buffer contains indices data).\n *\n *   Examples below:\n *   ```js\n *   // at initialization phase\n *   const verticesBuffer = new WebGLArrayBuffer([], DYNAMIC_DRAW);\n *   const indicesBuffer = new WebGLArrayBuffer([], DYNAMIC_DRAW);\n *\n *   // when array values have changed\n *   helper.flushBufferData(ARRAY_BUFFER, this.verticesBuffer);\n *   helper.flushBufferData(ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\n *\n *   // at rendering phase\n *   helper.bindBuffer(ARRAY_BUFFER, this.verticesBuffer);\n *   helper.bindBuffer(ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\n *   ```\n *\n * ### Specifying attributes\n *\n *   The GPU only receives the data as arrays of numbers. These numbers must be handled differently depending on what it describes (position, texture coordinate...).\n *   Attributes are used to specify these uses. Use {@link enableAttributeArray_} and either\n *   the default attribute names in {@link module:ol/webgl/Helper.DefaultAttrib} or custom ones.\n *\n *   Please note that you will have to specify the type and offset of the attributes in the data array. You can refer to the documentation of [WebGLRenderingContext.vertexAttribPointer](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer) for more explanation.\n *   ```js\n *   // here we indicate that the data array has the following structure:\n *   // [posX, posY, offsetX, offsetY, texCoordU, texCoordV, posX, posY, ...]\n *   helper.enableAttributes([\n *     {\n *        name: 'a_position',\n *        size: 2\n *     },\n *     {\n *       name: 'a_offset',\n *       size: 2\n *     },\n *     {\n *       name: 'a_texCoord',\n *       size: 2\n *     }\n *   ])\n *   ```\n *\n * ### Rendering primitives\n *\n *   Once all the steps above have been achieved, rendering primitives to the screen is done using {@link prepareDraw}, {@link drawElements} and {@link finalizeDraw}.\n *   ```js\n *   // frame preparation step\n *   helper.prepareDraw(frameState);\n *\n *   // call this for every data array that has to be rendered on screen\n *   helper.drawElements(0, this.indicesBuffer.getArray().length);\n *\n *   // finalize the rendering by applying post processes\n *   helper.finalizeDraw(frameState);\n *   ```\n *\n * For an example usage of this class, refer to {@link module:ol/renderer/webgl/PointsLayer~WebGLPointsLayerRenderer}.\n *\n *\n * @api\n */\nvar WebGLHelper = /** @class */ (function (_super) {\n    __extends(WebGLHelper, _super);\n    /**\n     * @param {Options} [opt_options] Options.\n     */\n    function WebGLHelper(opt_options) {\n        var _this = _super.call(this) || this;\n        var options = opt_options || {};\n        /** @private */\n        _this.boundHandleWebGLContextLost_ = _this.handleWebGLContextLost.bind(_this);\n        /** @private */\n        _this.boundHandleWebGLContextRestored_ =\n            _this.handleWebGLContextRestored.bind(_this);\n        /**\n         * @private\n         * @type {HTMLCanvasElement}\n         */\n        _this.canvas_ = document.createElement('canvas');\n        _this.canvas_.style.position = 'absolute';\n        _this.canvas_.style.left = '0';\n        /**\n         * @private\n         * @type {WebGLRenderingContext}\n         */\n        _this.gl_ = getContext(_this.canvas_);\n        var gl = _this.getGL();\n        /**\n         * @private\n         * @type {!Object<string, BufferCacheEntry>}\n         */\n        _this.bufferCache_ = {};\n        /**\n         * @private\n         * @type {Object<string, Object>}\n         */\n        _this.extensionCache_ = {};\n        /**\n         * @private\n         * @type {WebGLProgram}\n         */\n        _this.currentProgram_ = null;\n        _this.canvas_.addEventListener(ContextEventType.LOST, _this.boundHandleWebGLContextLost_);\n        _this.canvas_.addEventListener(ContextEventType.RESTORED, _this.boundHandleWebGLContextRestored_);\n        /**\n         * @private\n         * @type {import(\"../transform.js\").Transform}\n         */\n        _this.offsetRotateMatrix_ = createTransform();\n        /**\n         * @private\n         * @type {import(\"../transform.js\").Transform}\n         */\n        _this.offsetScaleMatrix_ = createTransform();\n        /**\n         * @private\n         * @type {Array<number>}\n         */\n        _this.tmpMat4_ = create();\n        /**\n         * @private\n         * @type {Object<string, WebGLUniformLocation>}\n         */\n        _this.uniformLocations_ = {};\n        /**\n         * @private\n         * @type {Object<string, number>}\n         */\n        _this.attribLocations_ = {};\n        /**\n         * Holds info about custom uniforms used in the post processing pass.\n         * If the uniform is a texture, the WebGL Texture object will be stored here.\n         * @type {Array<UniformInternalDescription>}\n         * @private\n         */\n        _this.uniforms_ = [];\n        if (options.uniforms) {\n            for (var name_1 in options.uniforms) {\n                _this.uniforms_.push({\n                    name: name_1,\n                    value: options.uniforms[name_1],\n                });\n            }\n        }\n        /**\n         * An array of PostProcessingPass objects is kept in this variable, built from the steps provided in the\n         * options. If no post process was given, a default one is used (so as not to have to make an exception to\n         * the frame buffer logic).\n         * @type {Array<WebGLPostProcessingPass>}\n         * @private\n         */\n        _this.postProcessPasses_ = options.postProcesses\n            ? options.postProcesses.map(function (options) {\n                return new WebGLPostProcessingPass({\n                    webGlContext: gl,\n                    scaleRatio: options.scaleRatio,\n                    vertexShader: options.vertexShader,\n                    fragmentShader: options.fragmentShader,\n                    uniforms: options.uniforms,\n                });\n            })\n            : [new WebGLPostProcessingPass({ webGlContext: gl })];\n        /**\n         * @type {string|null}\n         * @private\n         */\n        _this.shaderCompileErrors_ = null;\n        /**\n         * @type {number}\n         * @private\n         */\n        _this.startTime_ = Date.now();\n        return _this;\n    }\n    /**\n     * Get a WebGL extension.  If the extension is not supported, null is returned.\n     * Extensions are cached after they are enabled for the first time.\n     * @param {string} name The extension name.\n     * @return {Object} The extension or null if not supported.\n     */\n    WebGLHelper.prototype.getExtension = function (name) {\n        if (name in this.extensionCache_) {\n            return this.extensionCache_[name];\n        }\n        var extension = this.gl_.getExtension(name);\n        this.extensionCache_[name] = extension;\n        return extension;\n    };\n    /**\n     * Just bind the buffer if it's in the cache. Otherwise create\n     * the WebGL buffer, bind it, populate it, and add an entry to\n     * the cache.\n     * @param {import(\"./Buffer\").default} buffer Buffer.\n     * @api\n     */\n    WebGLHelper.prototype.bindBuffer = function (buffer) {\n        var gl = this.getGL();\n        var bufferKey = getUid(buffer);\n        var bufferCache = this.bufferCache_[bufferKey];\n        if (!bufferCache) {\n            var webGlBuffer = gl.createBuffer();\n            bufferCache = {\n                buffer: buffer,\n                webGlBuffer: webGlBuffer,\n            };\n            this.bufferCache_[bufferKey] = bufferCache;\n        }\n        gl.bindBuffer(buffer.getType(), bufferCache.webGlBuffer);\n    };\n    /**\n     * Update the data contained in the buffer array; this is required for the\n     * new data to be rendered\n     * @param {import(\"./Buffer\").default} buffer Buffer.\n     * @api\n     */\n    WebGLHelper.prototype.flushBufferData = function (buffer) {\n        var gl = this.getGL();\n        this.bindBuffer(buffer);\n        gl.bufferData(buffer.getType(), buffer.getArray(), buffer.getUsage());\n    };\n    /**\n     * @param {import(\"./Buffer.js\").default} buf Buffer.\n     */\n    WebGLHelper.prototype.deleteBuffer = function (buf) {\n        var gl = this.getGL();\n        var bufferKey = getUid(buf);\n        var bufferCacheEntry = this.bufferCache_[bufferKey];\n        if (bufferCacheEntry && !gl.isContextLost()) {\n            gl.deleteBuffer(bufferCacheEntry.webGlBuffer);\n        }\n        delete this.bufferCache_[bufferKey];\n    };\n    /**\n     * Clean up.\n     */\n    WebGLHelper.prototype.disposeInternal = function () {\n        this.canvas_.removeEventListener(ContextEventType.LOST, this.boundHandleWebGLContextLost_);\n        this.canvas_.removeEventListener(ContextEventType.RESTORED, this.boundHandleWebGLContextRestored_);\n        var extension = this.gl_.getExtension('WEBGL_lose_context');\n        if (extension) {\n            extension.loseContext();\n        }\n        delete this.gl_;\n        delete this.canvas_;\n    };\n    /**\n     * Clear the buffer & set the viewport to draw.\n     * Post process passes will be initialized here, the first one being bound as a render target for\n     * subsequent draw calls.\n     * @param {import(\"../PluggableMap.js\").FrameState} frameState current frame state\n     * @param {boolean} [opt_disableAlphaBlend] If true, no alpha blending will happen.\n     * @api\n     */\n    WebGLHelper.prototype.prepareDraw = function (frameState, opt_disableAlphaBlend) {\n        var gl = this.getGL();\n        var canvas = this.getCanvas();\n        var size = frameState.size;\n        var pixelRatio = frameState.pixelRatio;\n        canvas.width = size[0] * pixelRatio;\n        canvas.height = size[1] * pixelRatio;\n        canvas.style.width = size[0] + 'px';\n        canvas.style.height = size[1] + 'px';\n        gl.useProgram(this.currentProgram_);\n        // loop backwards in post processes list\n        for (var i = this.postProcessPasses_.length - 1; i >= 0; i--) {\n            this.postProcessPasses_[i].init(frameState);\n        }\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        gl.clearColor(0.0, 0.0, 0.0, 0.0);\n        gl.clear(gl.COLOR_BUFFER_BIT);\n        gl.enable(gl.BLEND);\n        gl.blendFunc(gl.ONE, opt_disableAlphaBlend ? gl.ZERO : gl.ONE_MINUS_SRC_ALPHA);\n        gl.useProgram(this.currentProgram_);\n        this.applyFrameState(frameState);\n        this.applyUniforms(frameState);\n    };\n    /**\n     * Clear the render target & bind it for future draw operations.\n     * This is similar to `prepareDraw`, only post processes will not be applied.\n     * Note: the whole viewport will be drawn to the render target, regardless of its size.\n     * @param {import(\"../PluggableMap.js\").FrameState} frameState current frame state\n     * @param {import(\"./RenderTarget.js\").default} renderTarget Render target to draw to\n     * @param {boolean} [opt_disableAlphaBlend] If true, no alpha blending will happen.\n     */\n    WebGLHelper.prototype.prepareDrawToRenderTarget = function (frameState, renderTarget, opt_disableAlphaBlend) {\n        var gl = this.getGL();\n        var size = renderTarget.getSize();\n        gl.bindFramebuffer(gl.FRAMEBUFFER, renderTarget.getFramebuffer());\n        gl.viewport(0, 0, size[0], size[1]);\n        gl.bindTexture(gl.TEXTURE_2D, renderTarget.getTexture());\n        gl.clearColor(0.0, 0.0, 0.0, 0.0);\n        gl.clear(gl.COLOR_BUFFER_BIT);\n        gl.enable(gl.BLEND);\n        gl.blendFunc(gl.ONE, opt_disableAlphaBlend ? gl.ZERO : gl.ONE_MINUS_SRC_ALPHA);\n        gl.useProgram(this.currentProgram_);\n        this.applyFrameState(frameState);\n        this.applyUniforms(frameState);\n    };\n    /**\n     * Execute a draw call based on the currently bound program, texture, buffers, attributes.\n     * @param {number} start Start index.\n     * @param {number} end End index.\n     * @api\n     */\n    WebGLHelper.prototype.drawElements = function (start, end) {\n        var gl = this.getGL();\n        this.getExtension('OES_element_index_uint');\n        var elementType = gl.UNSIGNED_INT;\n        var elementSize = 4;\n        var numItems = end - start;\n        var offsetInBytes = start * elementSize;\n        gl.drawElements(gl.TRIANGLES, numItems, elementType, offsetInBytes);\n    };\n    /**\n     * Apply the successive post process passes which will eventually render to the actual canvas.\n     * @param {import(\"../PluggableMap.js\").FrameState} frameState current frame state\n     * @api\n     */\n    WebGLHelper.prototype.finalizeDraw = function (frameState) {\n        // apply post processes using the next one as target\n        for (var i = 0; i < this.postProcessPasses_.length; i++) {\n            this.postProcessPasses_[i].apply(frameState, this.postProcessPasses_[i + 1] || null);\n        }\n    };\n    /**\n     * @return {HTMLCanvasElement} Canvas.\n     * @api\n     */\n    WebGLHelper.prototype.getCanvas = function () {\n        return this.canvas_;\n    };\n    /**\n     * Get the WebGL rendering context\n     * @return {WebGLRenderingContext} The rendering context.\n     * @api\n     */\n    WebGLHelper.prototype.getGL = function () {\n        return this.gl_;\n    };\n    /**\n     * Sets the default matrix uniforms for a given frame state. This is called internally in `prepareDraw`.\n     * @param {import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n     * @private\n     */\n    WebGLHelper.prototype.applyFrameState = function (frameState) {\n        var size = frameState.size;\n        var rotation = frameState.viewState.rotation;\n        var offsetScaleMatrix = resetTransform(this.offsetScaleMatrix_);\n        scaleTransform(offsetScaleMatrix, 2 / size[0], 2 / size[1]);\n        var offsetRotateMatrix = resetTransform(this.offsetRotateMatrix_);\n        if (rotation !== 0) {\n            rotateTransform(offsetRotateMatrix, -rotation);\n        }\n        this.setUniformMatrixValue(DefaultUniform.OFFSET_SCALE_MATRIX, fromTransform(this.tmpMat4_, offsetScaleMatrix));\n        this.setUniformMatrixValue(DefaultUniform.OFFSET_ROTATION_MATRIX, fromTransform(this.tmpMat4_, offsetRotateMatrix));\n        this.setUniformFloatValue(DefaultUniform.TIME, (Date.now() - this.startTime_) * 0.001);\n        this.setUniformFloatValue(DefaultUniform.ZOOM, frameState.viewState.zoom);\n        this.setUniformFloatValue(DefaultUniform.RESOLUTION, frameState.viewState.resolution);\n    };\n    /**\n     * Sets the custom uniforms based on what was given in the constructor. This is called internally in `prepareDraw`.\n     * @param {import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n     * @private\n     */\n    WebGLHelper.prototype.applyUniforms = function (frameState) {\n        var gl = this.getGL();\n        var value;\n        var textureSlot = 0;\n        this.uniforms_.forEach(function (uniform) {\n            value =\n                typeof uniform.value === 'function'\n                    ? uniform.value(frameState)\n                    : uniform.value;\n            // apply value based on type\n            if (value instanceof HTMLCanvasElement ||\n                value instanceof HTMLImageElement ||\n                value instanceof ImageData) {\n                // create a texture & put data\n                if (!uniform.texture) {\n                    uniform.prevValue = undefined;\n                    uniform.texture = gl.createTexture();\n                }\n                gl.activeTexture(gl[\"TEXTURE\" + textureSlot]);\n                gl.bindTexture(gl.TEXTURE_2D, uniform.texture);\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n                var imageReady = !(value instanceof HTMLImageElement) ||\n                    /** @type {HTMLImageElement} */ (value).complete;\n                if (imageReady && uniform.prevValue !== value) {\n                    uniform.prevValue = value;\n                    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, value);\n                }\n                // fill texture slots by increasing index\n                gl.uniform1i(this.getUniformLocation(uniform.name), textureSlot++);\n            }\n            else if (Array.isArray(value) && value.length === 6) {\n                this.setUniformMatrixValue(uniform.name, fromTransform(this.tmpMat4_, value));\n            }\n            else if (Array.isArray(value) && value.length <= 4) {\n                switch (value.length) {\n                    case 2:\n                        gl.uniform2f(this.getUniformLocation(uniform.name), value[0], value[1]);\n                        return;\n                    case 3:\n                        gl.uniform3f(this.getUniformLocation(uniform.name), value[0], value[1], value[2]);\n                        return;\n                    case 4:\n                        gl.uniform4f(this.getUniformLocation(uniform.name), value[0], value[1], value[2], value[3]);\n                        return;\n                    default:\n                        return;\n                }\n            }\n            else if (typeof value === 'number') {\n                gl.uniform1f(this.getUniformLocation(uniform.name), value);\n            }\n        }.bind(this));\n    };\n    /**\n     * Use a program.  If the program is already in use, this will return `false`.\n     * @param {WebGLProgram} program Program.\n     * @return {boolean} Changed.\n     * @api\n     */\n    WebGLHelper.prototype.useProgram = function (program) {\n        if (program == this.currentProgram_) {\n            return false;\n        }\n        else {\n            var gl = this.getGL();\n            gl.useProgram(program);\n            this.currentProgram_ = program;\n            this.uniformLocations_ = {};\n            this.attribLocations_ = {};\n            return true;\n        }\n    };\n    /**\n     * Will attempt to compile a vertex or fragment shader based on source\n     * On error, the shader will be returned but\n     * `gl.getShaderParameter(shader, gl.COMPILE_STATUS)` will return `true`\n     * Use `gl.getShaderInfoLog(shader)` to have details\n     * @param {string} source Shader source\n     * @param {ShaderType} type VERTEX_SHADER or FRAGMENT_SHADER\n     * @return {WebGLShader} Shader object\n     */\n    WebGLHelper.prototype.compileShader = function (source, type) {\n        var gl = this.getGL();\n        var shader = gl.createShader(type);\n        gl.shaderSource(shader, source);\n        gl.compileShader(shader);\n        return shader;\n    };\n    /**\n     * Create a program for a vertex and fragment shader.  Throws if shader compilation fails.\n     * @param {string} fragmentShaderSource Fragment shader source.\n     * @param {string} vertexShaderSource Vertex shader source.\n     * @return {WebGLProgram} Program\n     * @api\n     */\n    WebGLHelper.prototype.getProgram = function (fragmentShaderSource, vertexShaderSource) {\n        var gl = this.getGL();\n        var fragmentShader = this.compileShader(fragmentShaderSource, gl.FRAGMENT_SHADER);\n        var vertexShader = this.compileShader(vertexShaderSource, gl.VERTEX_SHADER);\n        var program = gl.createProgram();\n        gl.attachShader(program, fragmentShader);\n        gl.attachShader(program, vertexShader);\n        gl.linkProgram(program);\n        if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n            var message = \"Fragment shader compliation failed: \" + gl.getShaderInfoLog(fragmentShader);\n            throw new Error(message);\n        }\n        gl.deleteShader(fragmentShader);\n        if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n            var message = \"Vertex shader compilation failed: \" + gl.getShaderInfoLog(vertexShader);\n            throw new Error(message);\n        }\n        gl.deleteShader(vertexShader);\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n            var message = \"GL program linking failed: \" + gl.getShaderInfoLog(vertexShader);\n            throw new Error(message);\n        }\n        return program;\n    };\n    /**\n     * Will get the location from the shader or the cache\n     * @param {string} name Uniform name\n     * @return {WebGLUniformLocation} uniformLocation\n     * @api\n     */\n    WebGLHelper.prototype.getUniformLocation = function (name) {\n        if (this.uniformLocations_[name] === undefined) {\n            this.uniformLocations_[name] = this.getGL().getUniformLocation(this.currentProgram_, name);\n        }\n        return this.uniformLocations_[name];\n    };\n    /**\n     * Will get the location from the shader or the cache\n     * @param {string} name Attribute name\n     * @return {number} attribLocation\n     * @api\n     */\n    WebGLHelper.prototype.getAttributeLocation = function (name) {\n        if (this.attribLocations_[name] === undefined) {\n            this.attribLocations_[name] = this.getGL().getAttribLocation(this.currentProgram_, name);\n        }\n        return this.attribLocations_[name];\n    };\n    /**\n     * Modifies the given transform to apply the rotation/translation/scaling of the given frame state.\n     * The resulting transform can be used to convert world space coordinates to view coordinates.\n     * @param {import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n     * @param {import(\"../transform\").Transform} transform Transform to update.\n     * @return {import(\"../transform\").Transform} The updated transform object.\n     * @api\n     */\n    WebGLHelper.prototype.makeProjectionTransform = function (frameState, transform) {\n        var size = frameState.size;\n        var rotation = frameState.viewState.rotation;\n        var resolution = frameState.viewState.resolution;\n        var center = frameState.viewState.center;\n        resetTransform(transform);\n        composeTransform(transform, 0, 0, 2 / (resolution * size[0]), 2 / (resolution * size[1]), -rotation, -center[0], -center[1]);\n        return transform;\n    };\n    /**\n     * Give a value for a standard float uniform\n     * @param {string} uniform Uniform name\n     * @param {number} value Value\n     * @api\n     */\n    WebGLHelper.prototype.setUniformFloatValue = function (uniform, value) {\n        this.getGL().uniform1f(this.getUniformLocation(uniform), value);\n    };\n    /**\n     * Give a value for a standard matrix4 uniform\n     * @param {string} uniform Uniform name\n     * @param {Array<number>} value Matrix value\n     * @api\n     */\n    WebGLHelper.prototype.setUniformMatrixValue = function (uniform, value) {\n        this.getGL().uniformMatrix4fv(this.getUniformLocation(uniform), false, value);\n    };\n    /**\n     * Will set the currently bound buffer to an attribute of the shader program. Used by `#enableAttributes`\n     * internally.\n     * @param {string} attribName Attribute name\n     * @param {number} size Number of components per attributes\n     * @param {number} type UNSIGNED_INT, UNSIGNED_BYTE, UNSIGNED_SHORT or FLOAT\n     * @param {number} stride Stride in bytes (0 means attribs are packed)\n     * @param {number} offset Offset in bytes\n     * @private\n     */\n    WebGLHelper.prototype.enableAttributeArray_ = function (attribName, size, type, stride, offset) {\n        var location = this.getAttributeLocation(attribName);\n        // the attribute has not been found in the shaders; do not enable it\n        if (location < 0) {\n            return;\n        }\n        this.getGL().enableVertexAttribArray(location);\n        this.getGL().vertexAttribPointer(location, size, type, false, stride, offset);\n    };\n    /**\n     * Will enable the following attributes to be read from the currently bound buffer,\n     * i.e. tell the GPU where to read the different attributes in the buffer. An error in the\n     * size/type/order of attributes will most likely break the rendering and throw a WebGL exception.\n     * @param {Array<AttributeDescription>} attributes Ordered list of attributes to read from the buffer\n     * @api\n     */\n    WebGLHelper.prototype.enableAttributes = function (attributes) {\n        var stride = computeAttributesStride(attributes);\n        var offset = 0;\n        for (var i = 0; i < attributes.length; i++) {\n            var attr = attributes[i];\n            this.enableAttributeArray_(attr.name, attr.size, attr.type || FLOAT, stride, offset);\n            offset += attr.size * getByteSizeFromType(attr.type);\n        }\n    };\n    /**\n     * WebGL context was lost\n     * @private\n     */\n    WebGLHelper.prototype.handleWebGLContextLost = function () {\n        clear(this.bufferCache_);\n        this.currentProgram_ = null;\n    };\n    /**\n     * WebGL context was restored\n     * @private\n     */\n    WebGLHelper.prototype.handleWebGLContextRestored = function () { };\n    /**\n     * Will create or reuse a given webgl texture and apply the given size. If no image data\n     * specified, the texture will be empty, otherwise image data will be used and the `size`\n     * parameter will be ignored.\n     * Note: wrap parameters are set to clamp to edge, min filter is set to linear.\n     * @param {Array<number>} size Expected size of the texture\n     * @param {ImageData|HTMLImageElement|HTMLCanvasElement} [opt_data] Image data/object to bind to the texture\n     * @param {WebGLTexture} [opt_texture] Existing texture to reuse\n     * @return {WebGLTexture} The generated texture\n     * @api\n     */\n    WebGLHelper.prototype.createTexture = function (size, opt_data, opt_texture) {\n        var gl = this.getGL();\n        var texture = opt_texture || gl.createTexture();\n        // set params & size\n        var level = 0;\n        var internalFormat = gl.RGBA;\n        var border = 0;\n        var format = gl.RGBA;\n        var type = gl.UNSIGNED_BYTE;\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        if (opt_data) {\n            gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, format, type, opt_data);\n        }\n        else {\n            gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, size[0], size[1], border, format, type, null);\n        }\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        return texture;\n    };\n    return WebGLHelper;\n}(Disposable));\n/**\n * Compute a stride in bytes based on a list of attributes\n * @param {Array<AttributeDescription>} attributes Ordered list of attributes\n * @return {number} Stride, ie amount of values for each vertex in the vertex buffer\n * @api\n */\nexport function computeAttributesStride(attributes) {\n    var stride = 0;\n    for (var i = 0; i < attributes.length; i++) {\n        var attr = attributes[i];\n        stride += attr.size * getByteSizeFromType(attr.type);\n    }\n    return stride;\n}\n/**\n * Computes the size in byte of an attribute type.\n * @param {AttributeType} type Attribute type\n * @return {number} The size in bytes\n */\nfunction getByteSizeFromType(type) {\n    switch (type) {\n        case AttributeType.UNSIGNED_BYTE:\n            return Uint8Array.BYTES_PER_ELEMENT;\n        case AttributeType.UNSIGNED_SHORT:\n            return Uint16Array.BYTES_PER_ELEMENT;\n        case AttributeType.UNSIGNED_INT:\n            return Uint32Array.BYTES_PER_ELEMENT;\n        case AttributeType.FLOAT:\n        default:\n            return Float32Array.BYTES_PER_ELEMENT;\n    }\n}\nexport default WebGLHelper;\n//# sourceMappingURL=Helper.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/renderer/webgl/Layer\n */\nimport LayerRenderer from '../Layer.js';\nimport RenderEvent from '../../render/Event.js';\nimport RenderEventType from '../../render/EventType.js';\nimport WebGLHelper from '../../webgl/Helper.js';\n/**\n * @enum {string}\n */\nexport var WebGLWorkerMessageType = {\n    GENERATE_BUFFERS: 'GENERATE_BUFFERS',\n};\n/**\n * @typedef {Object} WebGLWorkerGenerateBuffersMessage\n * This message will trigger the generation of a vertex and an index buffer based on the given render instructions.\n * When the buffers are generated, the worked will send a message of the same type to the main thread, with\n * the generated buffers in it.\n * Note that any addition properties present in the message *will* be sent back to the main thread.\n * @property {WebGLWorkerMessageType} type Message type\n * @property {ArrayBuffer} renderInstructions Render instructions raw binary buffer.\n * @property {ArrayBuffer} [vertexBuffer] Vertices array raw binary buffer (sent by the worker).\n * @property {ArrayBuffer} [indexBuffer] Indices array raw binary buffer (sent by the worker).\n * @property {number} [customAttributesCount] Amount of custom attributes count in the render instructions.\n */\n/**\n * @typedef {Object} PostProcessesOptions\n * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than\n * the main canvas that will then be sampled up (useful for saving resource on blur steps).\n * @property {string} [vertexShader] Vertex shader source\n * @property {string} [fragmentShader] Fragment shader source\n * @property {Object<string,import(\"../../webgl/Helper\").UniformValue>} [uniforms] Uniform definitions for the post process step\n */\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the canvas element.\n * @property {Object<string,import(\"../../webgl/Helper\").UniformValue>} [uniforms] Uniform definitions for the post process steps\n * @property {Array<PostProcessesOptions>} [postProcesses] Post-processes definitions\n */\n/**\n * @classdesc\n * Base WebGL renderer class.\n * Holds all logic related to data manipulation & some common rendering logic\n * @template {import(\"../../layer/Layer.js\").default} LayerType\n */\nvar WebGLLayerRenderer = /** @class */ (function (_super) {\n    __extends(WebGLLayerRenderer, _super);\n    /**\n     * @param {LayerType} layer Layer.\n     * @param {Options} [opt_options] Options.\n     */\n    function WebGLLayerRenderer(layer, opt_options) {\n        var _this = _super.call(this, layer) || this;\n        var options = opt_options || {};\n        /**\n         * @type {WebGLHelper}\n         * @protected\n         */\n        _this.helper = new WebGLHelper({\n            postProcesses: options.postProcesses,\n            uniforms: options.uniforms,\n        });\n        if (options.className !== undefined) {\n            _this.helper.getCanvas().className = options.className;\n        }\n        return _this;\n    }\n    /**\n     * Clean up.\n     */\n    WebGLLayerRenderer.prototype.disposeInternal = function () {\n        this.helper.dispose();\n        delete this.helper;\n        _super.prototype.disposeInternal.call(this);\n    };\n    /**\n     * @param {import(\"../../render/EventType.js\").default} type Event type.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @private\n     */\n    WebGLLayerRenderer.prototype.dispatchRenderEvent_ = function (type, frameState) {\n        var layer = this.getLayer();\n        if (layer.hasListener(type)) {\n            // RenderEvent does not get a context or an inversePixelTransform, because WebGL allows much less direct editing than Canvas2d does.\n            var event_1 = new RenderEvent(type, null, frameState, null);\n            layer.dispatchEvent(event_1);\n        }\n    };\n    /**\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @protected\n     */\n    WebGLLayerRenderer.prototype.preRender = function (frameState) {\n        this.dispatchRenderEvent_(RenderEventType.PRERENDER, frameState);\n    };\n    /**\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @protected\n     */\n    WebGLLayerRenderer.prototype.postRender = function (frameState) {\n        this.dispatchRenderEvent_(RenderEventType.POSTRENDER, frameState);\n    };\n    return WebGLLayerRenderer;\n}(LayerRenderer));\nvar tmpArray_ = [];\nvar bufferPositions_ = { vertexPosition: 0, indexPosition: 0 };\nfunction writePointVertex(buffer, pos, x, y, index) {\n    buffer[pos + 0] = x;\n    buffer[pos + 1] = y;\n    buffer[pos + 2] = index;\n}\n/**\n * An object holding positions both in an index and a vertex buffer.\n * @typedef {Object} BufferPositions\n * @property {number} vertexPosition Position in the vertex buffer\n * @property {number} indexPosition Position in the index buffer\n */\n/**\n * Pushes a quad (two triangles) based on a point geometry\n * @param {Float32Array} instructions Array of render instructions for points.\n * @param {number} elementIndex Index from which render instructions will be read.\n * @param {Float32Array} vertexBuffer Buffer in the form of a typed array.\n * @param {Uint32Array} indexBuffer Buffer in the form of a typed array.\n * @param {number} customAttributesCount Amount of custom attributes for each element.\n * @param {BufferPositions} [bufferPositions] Buffer write positions; if not specified, positions will be set at 0.\n * @return {BufferPositions} New buffer positions where to write next\n * @property {number} vertexPosition New position in the vertex buffer where future writes should start.\n * @property {number} indexPosition New position in the index buffer where future writes should start.\n * @private\n */\nexport function writePointFeatureToBuffers(instructions, elementIndex, vertexBuffer, indexBuffer, customAttributesCount, bufferPositions) {\n    // This is for x, y and index\n    var baseVertexAttrsCount = 3;\n    var baseInstructionsCount = 2;\n    var stride = baseVertexAttrsCount + customAttributesCount;\n    var x = instructions[elementIndex + 0];\n    var y = instructions[elementIndex + 1];\n    // read custom numerical attributes on the feature\n    var customAttrs = tmpArray_;\n    customAttrs.length = customAttributesCount;\n    for (var i = 0; i < customAttrs.length; i++) {\n        customAttrs[i] = instructions[elementIndex + baseInstructionsCount + i];\n    }\n    var vPos = bufferPositions ? bufferPositions.vertexPosition : 0;\n    var iPos = bufferPositions ? bufferPositions.indexPosition : 0;\n    var baseIndex = vPos / stride;\n    // push vertices for each of the four quad corners (first standard then custom attributes)\n    writePointVertex(vertexBuffer, vPos, x, y, 0);\n    customAttrs.length &&\n        vertexBuffer.set(customAttrs, vPos + baseVertexAttrsCount);\n    vPos += stride;\n    writePointVertex(vertexBuffer, vPos, x, y, 1);\n    customAttrs.length &&\n        vertexBuffer.set(customAttrs, vPos + baseVertexAttrsCount);\n    vPos += stride;\n    writePointVertex(vertexBuffer, vPos, x, y, 2);\n    customAttrs.length &&\n        vertexBuffer.set(customAttrs, vPos + baseVertexAttrsCount);\n    vPos += stride;\n    writePointVertex(vertexBuffer, vPos, x, y, 3);\n    customAttrs.length &&\n        vertexBuffer.set(customAttrs, vPos + baseVertexAttrsCount);\n    vPos += stride;\n    indexBuffer[iPos++] = baseIndex;\n    indexBuffer[iPos++] = baseIndex + 1;\n    indexBuffer[iPos++] = baseIndex + 3;\n    indexBuffer[iPos++] = baseIndex + 1;\n    indexBuffer[iPos++] = baseIndex + 2;\n    indexBuffer[iPos++] = baseIndex + 3;\n    bufferPositions_.vertexPosition = vPos;\n    bufferPositions_.indexPosition = iPos;\n    return bufferPositions_;\n}\n/**\n * Returns a texture of 1x1 pixel, white\n * @private\n * @return {ImageData} Image data.\n */\nexport function getBlankImageData() {\n    var canvas = document.createElement('canvas');\n    var image = canvas.getContext('2d').createImageData(1, 1);\n    image.data[0] = 255;\n    image.data[1] = 255;\n    image.data[2] = 255;\n    image.data[3] = 255;\n    return image;\n}\n/**\n * Generates a color array based on a numerical id\n * Note: the range for each component is 0 to 1 with 256 steps\n * @param {number} id Id\n * @param {Array<number>} [opt_array] Reusable array\n * @return {Array<number>} Color array containing the encoded id\n */\nexport function colorEncodeId(id, opt_array) {\n    var array = opt_array || [];\n    var radix = 256;\n    var divide = radix - 1;\n    array[0] = Math.floor(id / radix / radix / radix) / divide;\n    array[1] = (Math.floor(id / radix / radix) % radix) / divide;\n    array[2] = (Math.floor(id / radix) % radix) / divide;\n    array[3] = (id % radix) / divide;\n    return array;\n}\n/**\n * Reads an id from a color-encoded array\n * Note: the expected range for each component is 0 to 1 with 256 steps.\n * @param {Array<number>} color Color array containing the encoded id\n * @return {number} Decoded id\n */\nexport function colorDecodeId(color) {\n    var id = 0;\n    var radix = 256;\n    var mult = radix - 1;\n    id += Math.round(color[0] * radix * radix * radix * mult);\n    id += Math.round(color[1] * radix * radix * mult);\n    id += Math.round(color[2] * radix * mult);\n    id += Math.round(color[3] * mult);\n    return id;\n}\nexport default WebGLLayerRenderer;\n//# sourceMappingURL=Layer.js.map","/**\n * A wrapper class to simplify rendering to a texture instead of the final canvas\n * @module ol/webgl/RenderTarget\n */\nimport { equals } from '../array.js';\n// for pixel color reading\nvar tmpArray4 = new Uint8Array(4);\n/**\n * @classdesc\n * This class is a wrapper around the association of both a `WebGLTexture` and a `WebGLFramebuffer` instances,\n * simplifying initialization and binding for rendering.\n * @api\n */\nvar WebGLRenderTarget = /** @class */ (function () {\n    /**\n     * @param {import(\"./Helper.js\").default} helper WebGL helper; mandatory.\n     * @param {Array<number>} [opt_size] Expected size of the render target texture; note: this can be changed later on.\n     */\n    function WebGLRenderTarget(helper, opt_size) {\n        /**\n         * @private\n         * @type {import(\"./Helper.js\").default}\n         */\n        this.helper_ = helper;\n        var gl = helper.getGL();\n        /**\n         * @private\n         * @type {WebGLTexture}\n         */\n        this.texture_ = gl.createTexture();\n        /**\n         * @private\n         * @type {WebGLFramebuffer}\n         */\n        this.framebuffer_ = gl.createFramebuffer();\n        /**\n         * @type {Array<number>}\n         * @private\n         */\n        this.size_ = opt_size || [1, 1];\n        /**\n         * @type {Uint8Array}\n         * @private\n         */\n        this.data_ = new Uint8Array(0);\n        /**\n         * @type {boolean}\n         * @private\n         */\n        this.dataCacheDirty_ = true;\n        this.updateSize_();\n    }\n    /**\n     * Changes the size of the render target texture. Note: will do nothing if the size\n     * is already the same.\n     * @param {Array<number>} size Expected size of the render target texture\n     * @api\n     */\n    WebGLRenderTarget.prototype.setSize = function (size) {\n        if (equals(size, this.size_)) {\n            return;\n        }\n        this.size_[0] = size[0];\n        this.size_[1] = size[1];\n        this.updateSize_();\n    };\n    /**\n     * Returns the size of the render target texture\n     * @return {Array<number>} Size of the render target texture\n     * @api\n     */\n    WebGLRenderTarget.prototype.getSize = function () {\n        return this.size_;\n    };\n    /**\n     * This will cause following calls to `#readAll` or `#readPixel` to download the content of the\n     * render target into memory, which is an expensive operation.\n     * This content will be kept in cache but should be cleared after each new render.\n     * @api\n     */\n    WebGLRenderTarget.prototype.clearCachedData = function () {\n        this.dataCacheDirty_ = true;\n    };\n    /**\n     * Returns the full content of the frame buffer as a series of r, g, b, a components\n     * in the 0-255 range (unsigned byte).\n     * @return {Uint8Array} Integer array of color values\n     * @api\n     */\n    WebGLRenderTarget.prototype.readAll = function () {\n        if (this.dataCacheDirty_) {\n            var size = this.size_;\n            var gl = this.helper_.getGL();\n            gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer_);\n            gl.readPixels(0, 0, size[0], size[1], gl.RGBA, gl.UNSIGNED_BYTE, this.data_);\n            this.dataCacheDirty_ = false;\n        }\n        return this.data_;\n    };\n    /**\n     * Reads one pixel of the frame buffer as an array of r, g, b, a components\n     * in the 0-255 range (unsigned byte).\n     * If x and/or y are outside of existing data, an array filled with 0 is returned.\n     * @param {number} x Pixel coordinate\n     * @param {number} y Pixel coordinate\n     * @return {Uint8Array} Integer array with one color value (4 components)\n     * @api\n     */\n    WebGLRenderTarget.prototype.readPixel = function (x, y) {\n        if (x < 0 || y < 0 || x > this.size_[0] || y >= this.size_[1]) {\n            tmpArray4[0] = 0;\n            tmpArray4[1] = 0;\n            tmpArray4[2] = 0;\n            tmpArray4[3] = 0;\n            return tmpArray4;\n        }\n        this.readAll();\n        var index = Math.floor(x) + (this.size_[1] - Math.floor(y) - 1) * this.size_[0];\n        tmpArray4[0] = this.data_[index * 4];\n        tmpArray4[1] = this.data_[index * 4 + 1];\n        tmpArray4[2] = this.data_[index * 4 + 2];\n        tmpArray4[3] = this.data_[index * 4 + 3];\n        return tmpArray4;\n    };\n    /**\n     * @return {WebGLTexture} Texture to render to\n     */\n    WebGLRenderTarget.prototype.getTexture = function () {\n        return this.texture_;\n    };\n    /**\n     * @return {WebGLFramebuffer} Frame buffer of the render target\n     */\n    WebGLRenderTarget.prototype.getFramebuffer = function () {\n        return this.framebuffer_;\n    };\n    /**\n     * @private\n     */\n    WebGLRenderTarget.prototype.updateSize_ = function () {\n        var size = this.size_;\n        var gl = this.helper_.getGL();\n        this.texture_ = this.helper_.createTexture(size, null, this.texture_);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer_);\n        gl.viewport(0, 0, size[0], size[1]);\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture_, 0);\n        this.data_ = new Uint8Array(size[0] * size[1] * 4);\n    };\n    return WebGLRenderTarget;\n}());\nexport default WebGLRenderTarget;\n//# sourceMappingURL=RenderTarget.js.map","var source = \"var e=\\\"function\\\"==typeof Object.assign?Object.assign:function(e,n){if(null==e)throw new TypeError(\\\"Cannot convert undefined or null to object\\\");for(var t=Object(e),r=1,o=arguments.length;r<o;++r){var i=arguments[r];if(null!=i)for(var f in i)i.hasOwnProperty(f)&&(t[f]=i[f])}return t},n=\\\"GENERATE_BUFFERS\\\",t=[],r={vertexPosition:0,indexPosition:0};function o(e,n,t,r,o){e[n+0]=t,e[n+1]=r,e[n+2]=o}function i(e,n,i,f,s,u){var a=3+s,l=e[n+0],v=e[n+1],c=t;c.length=s;for(var g=0;g<c.length;g++)c[g]=e[n+2+g];var b=u?u.vertexPosition:0,h=u?u.indexPosition:0,d=b/a;return o(i,b,l,v,0),c.length&&i.set(c,b+3),o(i,b+=a,l,v,1),c.length&&i.set(c,b+3),o(i,b+=a,l,v,2),c.length&&i.set(c,b+3),o(i,b+=a,l,v,3),c.length&&i.set(c,b+3),b+=a,f[h++]=d,f[h++]=d+1,f[h++]=d+3,f[h++]=d+1,f[h++]=d+2,f[h++]=d+3,r.vertexPosition=b,r.indexPosition=h,r}var f=self;f.onmessage=function(t){var r=t.data;if(r.type===n){for(var o=r.customAttributesCount,s=2+o,u=new Float32Array(r.renderInstructions),a=u.length/s,l=4*a*(o+3),v=new Uint32Array(6*a),c=new Float32Array(l),g=null,b=0;b<u.length;b+=s)g=i(u,b,c,v,o,g);var h=e({vertexBuffer:c.buffer,indexBuffer:v.buffer,renderInstructions:u.buffer},r);f.postMessage(h,[c.buffer,v.buffer,u.buffer])}};\";\nvar blob = new Blob([source], { type: 'application/javascript' });\nvar url = URL.createObjectURL(blob);\nexport function create() {\n    return new Worker(url);\n}\n//# sourceMappingURL=webgl.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/renderer/webgl/PointsLayer\n */\nimport BaseVector from '../../layer/BaseVector.js';\nimport GeometryType from '../../geom/GeometryType.js';\nimport VectorEventType from '../../source/VectorEventType.js';\nimport ViewHint from '../../ViewHint.js';\nimport WebGLArrayBuffer from '../../webgl/Buffer.js';\nimport WebGLLayerRenderer, { WebGLWorkerMessageType, colorDecodeId, colorEncodeId, } from './Layer.js';\nimport WebGLRenderTarget from '../../webgl/RenderTarget.js';\nimport { ARRAY_BUFFER, DYNAMIC_DRAW, ELEMENT_ARRAY_BUFFER } from '../../webgl.js';\nimport { AttributeType, DefaultUniform } from '../../webgl/Helper.js';\nimport { apply as applyTransform, create as createTransform, makeInverse as makeInverseTransform, multiply as multiplyTransform, } from '../../transform.js';\nimport { assert } from '../../asserts.js';\nimport { buffer, createEmpty, equals } from '../../extent.js';\nimport { create as createWebGLWorker } from '../../worker/webgl.js';\nimport { getUid } from '../../util.js';\nimport { listen, unlistenByKey } from '../../events.js';\n/**\n * @typedef {Object} CustomAttribute A description of a custom attribute to be passed on to the GPU, with a value different\n * for each feature.\n * @property {string} name Attribute name.\n * @property {function(import(\"../../Feature\").default, Object<string, *>):number} callback This callback computes the numerical value of the\n * attribute for a given feature (properties are available as 2nd arg for quicker access).\n */\n/**\n * @typedef {Object} FeatureCacheItem Object that holds a reference to a feature, its geometry and properties. Used to optimize\n * rebuildBuffers by accessing these objects quicker.\n * @property {import(\"../../Feature\").default} feature Feature\n * @property {Object<string, *>} properties Feature properties\n * @property {import(\"../../geom\").Geometry} geometry Feature geometry\n */\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the canvas element.\n * @property {Array<CustomAttribute>} [attributes] These attributes will be read from the features in the source and then\n * passed to the GPU. The `name` property of each attribute will serve as its identifier:\n *  * In the vertex shader as an `attribute` by prefixing it with `a_`\n *  * In the fragment shader as a `varying` by prefixing it with `v_`\n * Please note that these can only be numerical values.\n * @property {string} vertexShader Vertex shader source, mandatory.\n * @property {string} fragmentShader Fragment shader source, mandatory.\n * @property {string} [hitVertexShader] Vertex shader source for hit detection rendering.\n * @property {string} [hitFragmentShader] Fragment shader source for hit detection rendering.\n * @property {Object<string,import(\"../../webgl/Helper\").UniformValue>} [uniforms] Uniform definitions for the post process steps\n * Please note that `u_texture` is reserved for the main texture slot.\n * @property {Array<import(\"./Layer\").PostProcessesOptions>} [postProcesses] Post-processes definitions\n */\n/**\n * @classdesc\n * WebGL vector renderer optimized for points.\n * All features will be rendered as quads (two triangles forming a square). New data will be flushed to the GPU\n * every time the vector source changes.\n *\n * You need to provide vertex and fragment shaders for rendering. This can be done using\n * {@link module:ol/webgl/ShaderBuilder} utilities. These shaders shall expect a `a_position` attribute\n * containing the screen-space projected center of the quad, as well as a `a_index` attribute\n * whose value (0, 1, 2 or 3) indicates which quad vertex is currently getting processed (see structure below).\n *\n * To include variable attributes in the shaders, you need to declare them using the `attributes` property of\n * the options object like so:\n * ```js\n * new WebGLPointsLayerRenderer(layer, {\n *   attributes: [\n *     {\n *       name: 'size',\n *       callback: function(feature) {\n *         // compute something with the feature\n *       }\n *     },\n *     {\n *       name: 'weight',\n *       callback: function(feature) {\n *         // compute something with the feature\n *       }\n *     },\n *   ],\n *   vertexShader:\n *     // shader using attribute a_weight and a_size\n *   fragmentShader:\n *     // shader using varying v_weight and v_size\n * ```\n *\n * To enable hit detection, you must as well provide dedicated shaders using the `hitVertexShader`\n * and `hitFragmentShader` properties. These shall expect the `a_hitColor` attribute to contain\n * the final color that will have to be output for hit detection to work.\n *\n * The following uniform is used for the main texture: `u_texture`.\n *\n * Please note that the main shader output should have premultiplied alpha, otherwise visual anomalies may occur.\n *\n * Points are rendered as quads with the following structure:\n *\n * ```\n *   (u0, v1)      (u1, v1)\n *  [3]----------[2]\n *   |`           |\n *   |  `         |\n *   |    `       |\n *   |      `     |\n *   |        `   |\n *   |          ` |\n *  [0]----------[1]\n *   (u0, v0)      (u1, v0)\n *  ```\n *\n * This uses {@link module:ol/webgl/Helper~WebGLHelper} internally.\n *\n * @api\n */\nvar WebGLPointsLayerRenderer = /** @class */ (function (_super) {\n    __extends(WebGLPointsLayerRenderer, _super);\n    /**\n     * @param {import(\"../../layer/Layer.js\").default} layer Layer.\n     * @param {Options} options Options.\n     */\n    function WebGLPointsLayerRenderer(layer, options) {\n        var _this = this;\n        var uniforms = options.uniforms || {};\n        var projectionMatrixTransform = createTransform();\n        uniforms[DefaultUniform.PROJECTION_MATRIX] = projectionMatrixTransform;\n        _this = _super.call(this, layer, {\n            className: options.className,\n            uniforms: uniforms,\n            postProcesses: options.postProcesses,\n        }) || this;\n        _this.sourceRevision_ = -1;\n        _this.verticesBuffer_ = new WebGLArrayBuffer(ARRAY_BUFFER, DYNAMIC_DRAW);\n        _this.hitVerticesBuffer_ = new WebGLArrayBuffer(ARRAY_BUFFER, DYNAMIC_DRAW);\n        _this.indicesBuffer_ = new WebGLArrayBuffer(ELEMENT_ARRAY_BUFFER, DYNAMIC_DRAW);\n        _this.program_ = _this.helper.getProgram(options.fragmentShader, options.vertexShader);\n        /**\n         * @type {boolean}\n         * @private\n         */\n        _this.hitDetectionEnabled_ =\n            options.hitFragmentShader && options.hitVertexShader ? true : false;\n        _this.hitProgram_ =\n            _this.hitDetectionEnabled_ &&\n                _this.helper.getProgram(options.hitFragmentShader, options.hitVertexShader);\n        var customAttributes = options.attributes\n            ? options.attributes.map(function (attribute) {\n                return {\n                    name: 'a_' + attribute.name,\n                    size: 1,\n                    type: AttributeType.FLOAT,\n                };\n            })\n            : [];\n        /**\n         * A list of attributes used by the renderer. By default only the position and\n         * index of the vertex (0 to 3) are required.\n         * @type {Array<import('../../webgl/Helper.js').AttributeDescription>}\n         */\n        _this.attributes = [\n            {\n                name: 'a_position',\n                size: 2,\n                type: AttributeType.FLOAT,\n            },\n            {\n                name: 'a_index',\n                size: 1,\n                type: AttributeType.FLOAT,\n            },\n        ].concat(customAttributes);\n        /**\n         * A list of attributes used for hit detection.\n         * @type {Array<import('../../webgl/Helper.js').AttributeDescription>}\n         */\n        _this.hitDetectionAttributes = [\n            {\n                name: 'a_position',\n                size: 2,\n                type: AttributeType.FLOAT,\n            },\n            {\n                name: 'a_index',\n                size: 1,\n                type: AttributeType.FLOAT,\n            },\n            {\n                name: 'a_hitColor',\n                size: 4,\n                type: AttributeType.FLOAT,\n            },\n            {\n                name: 'a_featureUid',\n                size: 1,\n                type: AttributeType.FLOAT,\n            },\n        ].concat(customAttributes);\n        _this.customAttributes = options.attributes ? options.attributes : [];\n        _this.previousExtent_ = createEmpty();\n        /**\n         * This transform is updated on every frame and is the composition of:\n         * - invert of the world->screen transform that was used when rebuilding buffers (see `this.renderTransform_`)\n         * - current world->screen transform\n         * @type {import(\"../../transform.js\").Transform}\n         * @private\n         */\n        _this.currentTransform_ = projectionMatrixTransform;\n        /**\n         * This transform is updated when buffers are rebuilt and converts world space coordinates to screen space\n         * @type {import(\"../../transform.js\").Transform}\n         * @private\n         */\n        _this.renderTransform_ = createTransform();\n        /**\n         * @type {import(\"../../transform.js\").Transform}\n         * @private\n         */\n        _this.invertRenderTransform_ = createTransform();\n        /**\n         * @type {Float32Array}\n         * @private\n         */\n        _this.renderInstructions_ = new Float32Array(0);\n        /**\n         * These instructions are used for hit detection\n         * @type {Float32Array}\n         * @private\n         */\n        _this.hitRenderInstructions_ = new Float32Array(0);\n        /**\n         * @type {WebGLRenderTarget}\n         * @private\n         */\n        _this.hitRenderTarget_ =\n            _this.hitDetectionEnabled_ && new WebGLRenderTarget(_this.helper);\n        _this.worker_ = createWebGLWorker();\n        _this.worker_.addEventListener('message', \n        /**\n         * @param {*} event Event.\n         * @this {WebGLPointsLayerRenderer}\n         */\n        function (event) {\n            var received = event.data;\n            if (received.type === WebGLWorkerMessageType.GENERATE_BUFFERS) {\n                var projectionTransform = received.projectionTransform;\n                if (received.hitDetection) {\n                    this.hitVerticesBuffer_.fromArrayBuffer(received.vertexBuffer);\n                    this.helper.flushBufferData(this.hitVerticesBuffer_);\n                }\n                else {\n                    this.verticesBuffer_.fromArrayBuffer(received.vertexBuffer);\n                    this.helper.flushBufferData(this.verticesBuffer_);\n                }\n                this.indicesBuffer_.fromArrayBuffer(received.indexBuffer);\n                this.helper.flushBufferData(this.indicesBuffer_);\n                this.renderTransform_ = projectionTransform;\n                makeInverseTransform(this.invertRenderTransform_, this.renderTransform_);\n                if (received.hitDetection) {\n                    this.hitRenderInstructions_ = new Float32Array(event.data.renderInstructions);\n                }\n                else {\n                    this.renderInstructions_ = new Float32Array(event.data.renderInstructions);\n                }\n                this.getLayer().changed();\n            }\n        }.bind(_this));\n        /**\n         * This object will be updated when the source changes. Key is uid.\n         * @type {Object<string, FeatureCacheItem>}\n         * @private\n         */\n        _this.featureCache_ = {};\n        /**\n         * Amount of features in the cache.\n         * @type {number}\n         * @private\n         */\n        _this.featureCount_ = 0;\n        var source = _this.getLayer().getSource();\n        _this.sourceListenKeys_ = [\n            listen(source, VectorEventType.ADDFEATURE, _this.handleSourceFeatureAdded_, _this),\n            listen(source, VectorEventType.CHANGEFEATURE, _this.handleSourceFeatureChanged_, _this),\n            listen(source, VectorEventType.REMOVEFEATURE, _this.handleSourceFeatureDelete_, _this),\n            listen(source, VectorEventType.CLEAR, _this.handleSourceFeatureClear_, _this),\n        ];\n        source.forEachFeature(function (feature) {\n            this.featureCache_[getUid(feature)] = {\n                feature: feature,\n                properties: feature.getProperties(),\n                geometry: feature.getGeometry(),\n            };\n            this.featureCount_++;\n        }.bind(_this));\n        return _this;\n    }\n    /**\n     * @param {import(\"../../source/Vector.js\").VectorSourceEvent} event Event.\n     * @private\n     */\n    WebGLPointsLayerRenderer.prototype.handleSourceFeatureAdded_ = function (event) {\n        var feature = event.feature;\n        this.featureCache_[getUid(feature)] = {\n            feature: feature,\n            properties: feature.getProperties(),\n            geometry: feature.getGeometry(),\n        };\n        this.featureCount_++;\n    };\n    /**\n     * @param {import(\"../../source/Vector.js\").VectorSourceEvent} event Event.\n     * @private\n     */\n    WebGLPointsLayerRenderer.prototype.handleSourceFeatureChanged_ = function (event) {\n        var feature = event.feature;\n        this.featureCache_[getUid(feature)] = {\n            feature: feature,\n            properties: feature.getProperties(),\n            geometry: feature.getGeometry(),\n        };\n    };\n    /**\n     * @param {import(\"../../source/Vector.js\").VectorSourceEvent} event Event.\n     * @private\n     */\n    WebGLPointsLayerRenderer.prototype.handleSourceFeatureDelete_ = function (event) {\n        var feature = event.feature;\n        delete this.featureCache_[getUid(feature)];\n        this.featureCount_--;\n    };\n    /**\n     * @private\n     */\n    WebGLPointsLayerRenderer.prototype.handleSourceFeatureClear_ = function () {\n        this.featureCache_ = {};\n        this.featureCount_ = 0;\n    };\n    /**\n     * Render the layer.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @return {HTMLElement} The rendered element.\n     */\n    WebGLPointsLayerRenderer.prototype.renderFrame = function (frameState) {\n        this.preRender(frameState);\n        var renderCount = this.indicesBuffer_.getSize();\n        this.helper.drawElements(0, renderCount);\n        this.helper.finalizeDraw(frameState);\n        var canvas = this.helper.getCanvas();\n        var layerState = frameState.layerStatesArray[frameState.layerIndex];\n        var opacity = layerState.opacity;\n        if (opacity !== parseFloat(canvas.style.opacity)) {\n            canvas.style.opacity = String(opacity);\n        }\n        if (this.hitDetectionEnabled_) {\n            this.renderHitDetection(frameState);\n            this.hitRenderTarget_.clearCachedData();\n        }\n        this.postRender(frameState);\n        return canvas;\n    };\n    /**\n     * Determine whether render should be called.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @return {boolean} Layer is ready to be rendered.\n     */\n    WebGLPointsLayerRenderer.prototype.prepareFrame = function (frameState) {\n        var layer = this.getLayer();\n        var vectorSource = layer.getSource();\n        var viewState = frameState.viewState;\n        var viewNotMoving = !frameState.viewHints[ViewHint.ANIMATING] &&\n            !frameState.viewHints[ViewHint.INTERACTING];\n        var extentChanged = !equals(this.previousExtent_, frameState.extent);\n        var sourceChanged = this.sourceRevision_ < vectorSource.getRevision();\n        if (sourceChanged) {\n            this.sourceRevision_ = vectorSource.getRevision();\n        }\n        if (viewNotMoving && (extentChanged || sourceChanged)) {\n            var projection = viewState.projection;\n            var resolution = viewState.resolution;\n            var renderBuffer = layer instanceof BaseVector ? layer.getRenderBuffer() : 0;\n            var extent = buffer(frameState.extent, renderBuffer * resolution);\n            vectorSource.loadFeatures(extent, resolution, projection);\n            this.rebuildBuffers_(frameState);\n            this.previousExtent_ = frameState.extent.slice();\n        }\n        // apply the current projection transform with the invert of the one used to fill buffers\n        this.helper.makeProjectionTransform(frameState, this.currentTransform_);\n        multiplyTransform(this.currentTransform_, this.invertRenderTransform_);\n        this.helper.useProgram(this.program_);\n        this.helper.prepareDraw(frameState);\n        // write new data\n        this.helper.bindBuffer(this.verticesBuffer_);\n        this.helper.bindBuffer(this.indicesBuffer_);\n        this.helper.enableAttributes(this.attributes);\n        return true;\n    };\n    /**\n     * Rebuild internal webgl buffers based on current view extent; costly, should not be called too much\n     * @param {import(\"../../PluggableMap\").FrameState} frameState Frame state.\n     * @private\n     */\n    WebGLPointsLayerRenderer.prototype.rebuildBuffers_ = function (frameState) {\n        // saves the projection transform for the current frame state\n        var projectionTransform = createTransform();\n        this.helper.makeProjectionTransform(frameState, projectionTransform);\n        // here we anticipate the amount of render instructions that we well generate\n        // this can be done since we know that for normal render we only have x, y as base instructions,\n        // and x, y, r, g, b, a and featureUid for hit render instructions\n        // and we also know the amount of custom attributes to append to these\n        var totalInstructionsCount = (2 + this.customAttributes.length) * this.featureCount_;\n        if (!this.renderInstructions_ ||\n            this.renderInstructions_.length !== totalInstructionsCount) {\n            this.renderInstructions_ = new Float32Array(totalInstructionsCount);\n        }\n        if (this.hitDetectionEnabled_) {\n            var totalHitInstructionsCount = (7 + this.customAttributes.length) * this.featureCount_;\n            if (!this.hitRenderInstructions_ ||\n                this.hitRenderInstructions_.length !== totalHitInstructionsCount) {\n                this.hitRenderInstructions_ = new Float32Array(totalHitInstructionsCount);\n            }\n        }\n        // loop on features to fill the buffer\n        var featureCache, geometry;\n        var tmpCoords = [];\n        var tmpColor = [];\n        var renderIndex = 0;\n        var hitIndex = 0;\n        var hitColor;\n        for (var featureUid in this.featureCache_) {\n            featureCache = this.featureCache_[featureUid];\n            geometry = /** @type {import(\"../../geom\").Point} */ (featureCache.geometry);\n            if (!geometry || geometry.getType() !== GeometryType.POINT) {\n                continue;\n            }\n            tmpCoords[0] = geometry.getFlatCoordinates()[0];\n            tmpCoords[1] = geometry.getFlatCoordinates()[1];\n            applyTransform(projectionTransform, tmpCoords);\n            hitColor = colorEncodeId(hitIndex + 6, tmpColor);\n            this.renderInstructions_[renderIndex++] = tmpCoords[0];\n            this.renderInstructions_[renderIndex++] = tmpCoords[1];\n            // for hit detection, the feature uid is saved in the opacity value\n            // and the index of the opacity value is encoded in the color values\n            if (this.hitDetectionEnabled_) {\n                this.hitRenderInstructions_[hitIndex++] = tmpCoords[0];\n                this.hitRenderInstructions_[hitIndex++] = tmpCoords[1];\n                this.hitRenderInstructions_[hitIndex++] = hitColor[0];\n                this.hitRenderInstructions_[hitIndex++] = hitColor[1];\n                this.hitRenderInstructions_[hitIndex++] = hitColor[2];\n                this.hitRenderInstructions_[hitIndex++] = hitColor[3];\n                this.hitRenderInstructions_[hitIndex++] = Number(featureUid);\n            }\n            // pushing custom attributes\n            var value = void 0;\n            for (var j = 0; j < this.customAttributes.length; j++) {\n                value = this.customAttributes[j].callback(featureCache.feature, featureCache.properties);\n                this.renderInstructions_[renderIndex++] = value;\n                if (this.hitDetectionEnabled_) {\n                    this.hitRenderInstructions_[hitIndex++] = value;\n                }\n            }\n        }\n        /** @type {import('./Layer').WebGLWorkerGenerateBuffersMessage} */\n        var message = {\n            type: WebGLWorkerMessageType.GENERATE_BUFFERS,\n            renderInstructions: this.renderInstructions_.buffer,\n            customAttributesCount: this.customAttributes.length,\n        };\n        // additional properties will be sent back as-is by the worker\n        message['projectionTransform'] = projectionTransform;\n        this.worker_.postMessage(message, [this.renderInstructions_.buffer]);\n        this.renderInstructions_ = null;\n        /** @type {import('./Layer').WebGLWorkerGenerateBuffersMessage} */\n        if (this.hitDetectionEnabled_) {\n            var hitMessage = {\n                type: WebGLWorkerMessageType.GENERATE_BUFFERS,\n                renderInstructions: this.hitRenderInstructions_.buffer,\n                customAttributesCount: 5 + this.customAttributes.length,\n            };\n            hitMessage['projectionTransform'] = projectionTransform;\n            hitMessage['hitDetection'] = true;\n            this.worker_.postMessage(hitMessage, [\n                this.hitRenderInstructions_.buffer,\n            ]);\n            this.hitRenderInstructions_ = null;\n        }\n    };\n    /**\n     * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @param {number} hitTolerance Hit tolerance in pixels.\n     * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\n     * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n     * @return {T|undefined} Callback result.\n     * @template T\n     */\n    WebGLPointsLayerRenderer.prototype.forEachFeatureAtCoordinate = function (coordinate, frameState, hitTolerance, callback, matches) {\n        assert(this.hitDetectionEnabled_, 66);\n        if (!this.hitRenderInstructions_) {\n            return undefined;\n        }\n        var pixel = applyTransform(frameState.coordinateToPixelTransform, coordinate.slice());\n        var data = this.hitRenderTarget_.readPixel(pixel[0] / 2, pixel[1] / 2);\n        var color = [data[0] / 255, data[1] / 255, data[2] / 255, data[3] / 255];\n        var index = colorDecodeId(color);\n        var opacity = this.hitRenderInstructions_[index];\n        var uid = Math.floor(opacity).toString();\n        var source = this.getLayer().getSource();\n        var feature = source.getFeatureByUid(uid);\n        if (feature) {\n            return callback(feature, this.getLayer(), null);\n        }\n        return undefined;\n    };\n    /**\n     * Render the hit detection data to the corresponding render target\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState current frame state\n     */\n    WebGLPointsLayerRenderer.prototype.renderHitDetection = function (frameState) {\n        // skip render entirely if vertex buffers not ready/generated yet\n        if (!this.hitVerticesBuffer_.getSize()) {\n            return;\n        }\n        this.hitRenderTarget_.setSize([\n            Math.floor(frameState.size[0] / 2),\n            Math.floor(frameState.size[1] / 2),\n        ]);\n        this.helper.useProgram(this.hitProgram_);\n        this.helper.prepareDrawToRenderTarget(frameState, this.hitRenderTarget_, true);\n        this.helper.bindBuffer(this.hitVerticesBuffer_);\n        this.helper.bindBuffer(this.indicesBuffer_);\n        this.helper.enableAttributes(this.hitDetectionAttributes);\n        var renderCount = this.indicesBuffer_.getSize();\n        this.helper.drawElements(0, renderCount);\n    };\n    /**\n     * Clean up.\n     */\n    WebGLPointsLayerRenderer.prototype.disposeInternal = function () {\n        this.worker_.terminate();\n        this.layer_ = null;\n        this.sourceListenKeys_.forEach(function (key) {\n            unlistenByKey(key);\n        });\n        this.sourceListenKeys_ = null;\n        _super.prototype.disposeInternal.call(this);\n    };\n    return WebGLPointsLayerRenderer;\n}(WebGLLayerRenderer));\nexport default WebGLPointsLayerRenderer;\n//# sourceMappingURL=PointsLayer.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/layer/Heatmap\n */\nimport VectorLayer from './Vector.js';\nimport WebGLPointsLayerRenderer from '../renderer/webgl/PointsLayer.js';\nimport { assign } from '../obj.js';\nimport { clamp } from '../math.js';\nimport { createCanvasContext2D } from '../dom.js';\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {Array<string>} [gradient=['#00f', '#0ff', '#0f0', '#ff0', '#f00']] The color gradient\n * of the heatmap, specified as an array of CSS color strings.\n * @property {number} [radius=8] Radius size in pixels.\n * @property {number} [blur=15] Blur size in pixels.\n * @property {string|function(import(\"../Feature.js\").default):number} [weight='weight'] The feature\n * attribute to use for the weight or a function that returns a weight from a feature. Weight values\n * should range from 0 to 1 (and values outside will be clamped to that range).\n * @property {import(\"../source/Vector.js\").default} [source] Source.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n/**\n * @enum {string}\n * @private\n */\nvar Property = {\n    BLUR: 'blur',\n    GRADIENT: 'gradient',\n    RADIUS: 'radius',\n};\n/**\n * @const\n * @type {Array<string>}\n */\nvar DEFAULT_GRADIENT = ['#00f', '#0ff', '#0f0', '#ff0', '#f00'];\n/**\n * @classdesc\n * Layer for rendering vector data as a heatmap.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @fires import(\"../render/Event.js\").RenderEvent\n * @extends {VectorLayer<import(\"../source/Vector.js\").default>}\n * @api\n */\nvar Heatmap = /** @class */ (function (_super) {\n    __extends(Heatmap, _super);\n    /**\n     * @param {Options} [opt_options] Options.\n     */\n    function Heatmap(opt_options) {\n        var _this = this;\n        var options = opt_options ? opt_options : {};\n        var baseOptions = assign({}, options);\n        delete baseOptions.gradient;\n        delete baseOptions.radius;\n        delete baseOptions.blur;\n        delete baseOptions.weight;\n        _this = _super.call(this, baseOptions) || this;\n        /**\n         * @private\n         * @type {HTMLCanvasElement}\n         */\n        _this.gradient_ = null;\n        _this.addChangeListener(Property.GRADIENT, _this.handleGradientChanged_);\n        _this.setGradient(options.gradient ? options.gradient : DEFAULT_GRADIENT);\n        _this.setBlur(options.blur !== undefined ? options.blur : 15);\n        _this.setRadius(options.radius !== undefined ? options.radius : 8);\n        var weight = options.weight ? options.weight : 'weight';\n        if (typeof weight === 'string') {\n            _this.weightFunction_ = function (feature) {\n                return feature.get(weight);\n            };\n        }\n        else {\n            _this.weightFunction_ = weight;\n        }\n        // For performance reasons, don't sort the features before rendering.\n        // The render order is not relevant for a heatmap representation.\n        _this.setRenderOrder(null);\n        return _this;\n    }\n    /**\n     * Return the blur size in pixels.\n     * @return {number} Blur size in pixels.\n     * @api\n     * @observable\n     */\n    Heatmap.prototype.getBlur = function () {\n        return /** @type {number} */ (this.get(Property.BLUR));\n    };\n    /**\n     * Return the gradient colors as array of strings.\n     * @return {Array<string>} Colors.\n     * @api\n     * @observable\n     */\n    Heatmap.prototype.getGradient = function () {\n        return /** @type {Array<string>} */ (this.get(Property.GRADIENT));\n    };\n    /**\n     * Return the size of the radius in pixels.\n     * @return {number} Radius size in pixel.\n     * @api\n     * @observable\n     */\n    Heatmap.prototype.getRadius = function () {\n        return /** @type {number} */ (this.get(Property.RADIUS));\n    };\n    /**\n     * @private\n     */\n    Heatmap.prototype.handleGradientChanged_ = function () {\n        this.gradient_ = createGradient(this.getGradient());\n    };\n    /**\n     * Set the blur size in pixels.\n     * @param {number} blur Blur size in pixels.\n     * @api\n     * @observable\n     */\n    Heatmap.prototype.setBlur = function (blur) {\n        this.set(Property.BLUR, blur);\n    };\n    /**\n     * Set the gradient colors as array of strings.\n     * @param {Array<string>} colors Gradient.\n     * @api\n     * @observable\n     */\n    Heatmap.prototype.setGradient = function (colors) {\n        this.set(Property.GRADIENT, colors);\n    };\n    /**\n     * Set the size of the radius in pixels.\n     * @param {number} radius Radius size in pixel.\n     * @api\n     * @observable\n     */\n    Heatmap.prototype.setRadius = function (radius) {\n        this.set(Property.RADIUS, radius);\n    };\n    /**\n     * Create a renderer for this layer.\n     * @return {WebGLPointsLayerRenderer} A layer renderer.\n     */\n    Heatmap.prototype.createRenderer = function () {\n        return new WebGLPointsLayerRenderer(this, {\n            className: this.getClassName(),\n            attributes: [\n                {\n                    name: 'weight',\n                    callback: function (feature) {\n                        var weight = this.weightFunction_(feature);\n                        return weight !== undefined ? clamp(weight, 0, 1) : 1;\n                    }.bind(this),\n                },\n            ],\n            vertexShader: \"\\n        precision mediump float;\\n        uniform mat4 u_projectionMatrix;\\n        uniform mat4 u_offsetScaleMatrix;\\n        uniform float u_size;\\n        attribute vec2 a_position;\\n        attribute float a_index;\\n        attribute float a_weight;\\n\\n        varying vec2 v_texCoord;\\n        varying float v_weight;\\n\\n        void main(void) {\\n          mat4 offsetMatrix = u_offsetScaleMatrix;\\n          float offsetX = a_index == 0.0 || a_index == 3.0 ? -u_size / 2.0 : u_size / 2.0;\\n          float offsetY = a_index == 0.0 || a_index == 1.0 ? -u_size / 2.0 : u_size / 2.0;\\n          vec4 offsets = offsetMatrix * vec4(offsetX, offsetY, 0.0, 0.0);\\n          gl_Position = u_projectionMatrix * vec4(a_position, 0.0, 1.0) + offsets;\\n          float u = a_index == 0.0 || a_index == 3.0 ? 0.0 : 1.0;\\n          float v = a_index == 0.0 || a_index == 1.0 ? 0.0 : 1.0;\\n          v_texCoord = vec2(u, v);\\n          v_weight = a_weight;\\n        }\",\n            fragmentShader: \"\\n        precision mediump float;\\n        uniform float u_blurSlope;\\n\\n        varying vec2 v_texCoord;\\n        varying float v_weight;\\n\\n        void main(void) {\\n          vec2 texCoord = v_texCoord * 2.0 - vec2(1.0, 1.0);\\n          float sqRadius = texCoord.x * texCoord.x + texCoord.y * texCoord.y;\\n          float value = (1.0 - sqrt(sqRadius)) * u_blurSlope;\\n          float alpha = smoothstep(0.0, 1.0, value) * v_weight;\\n          gl_FragColor = vec4(alpha, alpha, alpha, alpha);\\n        }\",\n            hitVertexShader: \"\\n        precision mediump float;\\n        uniform mat4 u_projectionMatrix;\\n        uniform mat4 u_offsetScaleMatrix;\\n        uniform float u_size;\\n        attribute vec2 a_position;\\n        attribute float a_index;\\n        attribute float a_weight;\\n        attribute vec4 a_hitColor;\\n\\n        varying vec2 v_texCoord;\\n        varying float v_weight;\\n        varying vec4 v_hitColor;\\n\\n        void main(void) {\\n          mat4 offsetMatrix = u_offsetScaleMatrix;\\n          float offsetX = a_index == 0.0 || a_index == 3.0 ? -u_size / 2.0 : u_size / 2.0;\\n          float offsetY = a_index == 0.0 || a_index == 1.0 ? -u_size / 2.0 : u_size / 2.0;\\n          vec4 offsets = offsetMatrix * vec4(offsetX, offsetY, 0.0, 0.0);\\n          gl_Position = u_projectionMatrix * vec4(a_position, 0.0, 1.0) + offsets;\\n          float u = a_index == 0.0 || a_index == 3.0 ? 0.0 : 1.0;\\n          float v = a_index == 0.0 || a_index == 1.0 ? 0.0 : 1.0;\\n          v_texCoord = vec2(u, v);\\n          v_hitColor = a_hitColor;\\n          v_weight = a_weight;\\n        }\",\n            hitFragmentShader: \"\\n        precision mediump float;\\n        uniform float u_blurSlope;\\n\\n        varying vec2 v_texCoord;\\n        varying float v_weight;\\n        varying vec4 v_hitColor;\\n\\n        void main(void) {\\n          vec2 texCoord = v_texCoord * 2.0 - vec2(1.0, 1.0);\\n          float sqRadius = texCoord.x * texCoord.x + texCoord.y * texCoord.y;\\n          float value = (1.0 - sqrt(sqRadius)) * u_blurSlope;\\n          float alpha = smoothstep(0.0, 1.0, value) * v_weight;\\n          if (alpha < 0.05) {\\n            discard;\\n          }\\n\\n          gl_FragColor = v_hitColor;\\n        }\",\n            uniforms: {\n                u_size: function () {\n                    return (this.get(Property.RADIUS) + this.get(Property.BLUR)) * 2;\n                }.bind(this),\n                u_blurSlope: function () {\n                    return (this.get(Property.RADIUS) / Math.max(1, this.get(Property.BLUR)));\n                }.bind(this),\n            },\n            postProcesses: [\n                {\n                    fragmentShader: \"\\n            precision mediump float;\\n\\n            uniform sampler2D u_image;\\n            uniform sampler2D u_gradientTexture;\\n\\n            varying vec2 v_texCoord;\\n\\n            void main() {\\n              vec4 color = texture2D(u_image, v_texCoord);\\n              gl_FragColor.a = color.a;\\n              gl_FragColor.rgb = texture2D(u_gradientTexture, vec2(0.5, color.a)).rgb;\\n              gl_FragColor.rgb *= gl_FragColor.a;\\n            }\",\n                    uniforms: {\n                        u_gradientTexture: function () {\n                            return this.gradient_;\n                        }.bind(this),\n                    },\n                },\n            ],\n        });\n    };\n    Heatmap.prototype.renderDeclutter = function () { };\n    return Heatmap;\n}(VectorLayer));\n/**\n * @param {Array<string>} colors A list of colored.\n * @return {HTMLCanvasElement} canvas with gradient texture.\n */\nfunction createGradient(colors) {\n    var width = 1;\n    var height = 256;\n    var context = createCanvasContext2D(width, height);\n    var gradient = context.createLinearGradient(0, 0, width, height);\n    var step = 1 / (colors.length - 1);\n    for (var i = 0, ii = colors.length; i < ii; ++i) {\n        gradient.addColorStop(i * step, colors[i]);\n    }\n    context.fillStyle = gradient;\n    context.fillRect(0, 0, width, height);\n    return context.canvas;\n}\nexport default Heatmap;\n//# sourceMappingURL=Heatmap.js.map","//风景名胜代码\r\nexport const TRAVEL_CODES='110000|'+\r\n'110100|'+\r\n'110101|'+\r\n'110102|'+\r\n'110103|'+\r\n'110104|'+\r\n'110105|'+\r\n'110106|'+\r\n'110200|'+\r\n'110201|'+\r\n'110202|'+\r\n'110203|'+\r\n'110204|'+\r\n'110205|'+\r\n'110206|'+\r\n'110207|'+\r\n'110208|'+\r\n'110209|'+\r\n'110210'\r\n//酒店服务代码\r\nexport const restaurant_code='100000|100100|100101|100102|100103|100104|100105|100200|100201'\r\n//交通服务代码\r\nexport const vecation_code='150000|'+\r\n'150100|'+\r\n'150101|'+\r\n'150102|'+\r\n'150104|'+\r\n'150105|'+\r\n'150106|'+\r\n'150107|'+\r\n'150210|'+\r\n'150300|'+\r\n'150301|'+\r\n'150302|'+\r\n'150303|'+\r\n'150304|'+\r\n'150305|'+\r\n'150306|'+\r\n'150307|'+\r\n'150400|'+\r\n'150401|'+\r\n'150402|'+\r\n'150403|'+\r\n'150500|'+\r\n'150501|'+\r\n'150600|'+\r\n'150700|'+\r\n'150701|'+\r\n'150702|'+\r\n'150703|'+\r\n'150704|'+\r\n'150705|'+\r\n'150706|'+\r\n'150800|'+\r\n'150900|'+\r\n'150903|'+\r\n'150904|'+\r\n'150905|'+\r\n'150906|'+\r\n'150907|'+\r\n'150908|'+\r\n'150909|'+\r\n'151000|'+\r\n'151001|'+\r\n'151002|'+\r\n'151003|'+\r\n'151100|'+\r\n'151200|'+\r\n'151300|'+\r\n'151400|'+\r\n'151401|'+\r\n'151402|'+\r\n'151403|'+\r\n'151404|'+\r\n'151405'\r\n\r\n"],"sourceRoot":""}